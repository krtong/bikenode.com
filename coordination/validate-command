#!/bin/bash
# Command validation framework for consistent logging and input validation

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Standard validation functions that all commands should use
validate_instance_id() {
    local instance_id="$1"
    
    # Check format
    if ! [[ "$instance_id" =~ ^instance-[1-6]$ ]]; then
        echo "ERROR: Invalid instance ID format. Must be instance-1 through instance-6"
        return 1
    fi
    
    return 0
}

validate_message_content() {
    local message="$1"
    local max_length=${2:-1000}
    
    # Check if empty
    if [ -z "$message" ]; then
        echo "ERROR: Message cannot be empty"
        return 1
    fi
    
    # Check length
    if [ ${#message} -gt $max_length ]; then
        echo "ERROR: Message too long (max $max_length characters)"
        return 1
    fi
    
    # Check for potentially dangerous content
    if [[ "$message" =~ [;\&\|\`\$\(\)] ]]; then
        echo "ERROR: Message contains potentially unsafe characters"
        return 1
    fi
    
    return 0
}

validate_chatroom_name() {
    local chatroom="$1"
    
    # Check format for chatroom references
    if [[ "$chatroom" =~ ^#[a-z0-9-]+$ ]]; then
        return 0
    fi
    
    # Check format for plain names
    if [[ "$chatroom" =~ ^[a-z0-9-]+$ ]]; then
        return 0
    fi
    
    echo "ERROR: Invalid chatroom name. Use lowercase letters, numbers, and hyphens only"
    return 1
}

sanitize_input() {
    local input="$1"
    # Remove potentially dangerous characters but preserve basic punctuation
    echo "$input" | sed 's/[;&|`$(){}[\]\\]/_/g' | tr '\n' ' ' | head -c 500
}

# Function to check if command has proper logging
check_command_logging() {
    local command_file="$1"
    
    if [ ! -f "$command_file" ]; then
        echo "ERROR: Command file not found: $command_file"
        return 1
    fi
    
    # Check if command sources log-action
    if ! grep -q "source.*log-action" "$command_file"; then
        echo "WARNING: $command_file does not source log-action"
        return 1
    fi
    
    # Check if command calls log_action
    if ! grep -q "log_action" "$command_file"; then
        echo "WARNING: $command_file does not call log_action"
        return 1
    fi
    
    return 0
}

# Function to validate command environment
validate_environment() {
    local instance_id="${CLAUDE_INSTANCE_ID:-}"
    
    if [ -z "$instance_id" ]; then
        echo "ERROR: CLAUDE_INSTANCE_ID environment variable not set"
        echo "Set it with: export CLAUDE_INSTANCE_ID='instance-X'"
        return 1
    fi
    
    if ! validate_instance_id "$instance_id"; then
        return 1
    fi
    
    return 0
}

# Main validation entry point for commands
validate_command_start() {
    local command_name="$1"
    
    # Validate environment
    if ! validate_environment; then
        return 1
    fi
    
    # Check if data directory exists and is secure
    local data_dir="$SCRIPT_DIR/data"
    if [ ! -d "$data_dir" ]; then
        echo "ERROR: Data directory not found: $data_dir"
        return 1
    fi
    
    return 0
}

# If called directly, run command validation check
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    echo "üîç Command Validation Checker"
    echo "============================="
    echo ""
    
    if [ $# -eq 0 ]; then
        echo "Usage: validate-command <command-file>"
        echo ""
        echo "Check all commands:"
        echo "  for cmd in $(ls *.sh 2>/dev/null || ls send-* check-* create-* close-* 2>/dev/null); do"
        echo "    echo \"Checking \$cmd:\""
        echo "    ./validate-command \"\$cmd\""
        echo "  done"
        exit 1
    fi
    
    COMMAND_FILE="$1"
    
    echo "Checking: $COMMAND_FILE"
    
    if check_command_logging "$COMMAND_FILE"; then
        echo "‚úÖ Logging validation passed"
    else
        echo "‚ùå Logging validation failed"
    fi
    
    echo ""
fi