{
    "sourceFile": "images/optimize_image.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740681378224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740681378224,
            "name": "Commit-0",
            "content": "from PIL import Image\nimport os\nimport sys\nimport shutil\n\ndef create_image_assets(source_image_path, output_dir=\"./assets\"):\n    \"\"\"\n    Generate all necessary image assets for a website from a source image.\n    \n    Args:\n        source_image_path: Path to the source image\n        output_dir: Directory to save generated assets\n    \"\"\"\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n        os.makedirs(os.path.join(output_dir, \"favicons\"))\n        os.makedirs(os.path.join(output_dir, \"social\"))\n        os.makedirs(os.path.join(output_dir, \"thumbnails\"))\n    \n    try:\n        # Open the source image\n        img = Image.ox2pen(source_image_path)\n        \n        # Print original image info\n        original_size = os.path.getsize(source_image_path) / 1024  # KB\n        print(f\"\\nOriginal image: {source_image_path}\")\n        print(f\"Dimensions: {img.width}x{img.height} pixels\")\n        print(f\"File size: {original_size:.2f} KB\")\n        print(f\"Format: {img.format}\")\n        print(\"\\nGenerating assets...\")\n        \n        # Define image sizes to generate\n        sizes = {\n            # Favicons\n            \"favicons/favicon-16x16.png\": (16, 16),\n            \"favicons/favicon-32x32.png\": (32, 32),\n            \"favicons/favicon-48x48.png\": (48, 48),\n            \"favicons/favicon-64x64.png\": (64, 64),\n            \"favicons/favicon-96x96.png\": (96, 96),\n            \n            # iOS/Apple icons\n            \"apple-touch-icon.png\": (180, 180),\n            \"apple-touch-icon-precomposed.png\": (180, 180),\n            \n            # Android icons\n            \"favicons/android-chrome-192x192.png\": (192, 192),\n            \"favicons/android-chrome-512x512.png\": (512, 512),\n            \n            # Microsoft icons\n            \"favicons/mstile-150x150.png\": (150, 150),\n            \n            # Social media images\n            \"social/og-image.png\": (1200, 630),  # Facebook/Open Graph\n            \"social/twitter-card.png\": (1200, 600),  # Twitter\n            \n            # Thumbnails\n            \"thumbnails/thumb-150x150.png\": (150, 150),\n            \"thumbnails/thumb-300x300.png\": (300, 300),\n            \"thumbnails/thumb-600x600.png\": (600, 600),\n            \n            # Website logo\n            \"logo.png\": (512, 512),\n        }\n        \n        # Generate each size\n        results = []\n        \n        for filename, size in sizes.items():\n            # Create a copy of the image to resize\n            resized_img = img.copy()\n            \n            # Resize with high quality\n            resized_img = resized_img.resize(size, Image.LANCZOS)\n            \n            # Create full output path\n            output_path = os.path.join(output_dir, filename)\n            \n            # Ensure directory exists\n            os.makedirs(os.path.dirname(output_path), exist_ok=True)\n            \n            # Save optimized version\n            resized_img.save(\n                output_path,\n                optimize=True,\n                quality=90,\n                progressive=True\n            )\n            \n            # Get file size\n            file_size = os.path.getsize(output_path) / 1024  # KB\n            \n            results.append({\n                \"filename\": filename,\n                \"size\": f\"{size[0]}x{size[1]}\",\n                \"file_size\": f\"{file_size:.2f} KB\"\n            })\n            \n            # Special case for favicon.ico (multi-size ICO file)\n            if filename == \"favicons/favicon-64x64.png\":\n                ico_sizes = [(16, 16), (32, 32), (48, 48), (64, 64)]\n                ico_images = []\n                \n                for ico_size in ico_sizes:\n                    ico_img = img.copy()\n                    ico_img = ico_img.resize(ico_size, Image.LANCZOS)\n                    ico_images.append(ico_img)\n                \n                # Save as ICO file with multiple sizes\n                ico_path = os.path.join(output_dir, \"favicon.ico\")\n                ico_images[0].save(\n                    ico_path,\n                    format=\"ICO\",\n                    sizes=[(ico_images[i].width, ico_images[i].height) for i in range(len(ico_images))]\n                )\n                \n                ico_size = os.path.getsize(ico_path) / 1024\n                results.append({\n                    \"filename\": \"favicon.ico\",\n                    \"size\": \"16x16, 32x32, 48x48, 64x64\",\n                    \"file_size\": f\"{ico_size:.2f} KB\"\n                })\n        \n        # Create webmanifest file\n        manifest = {\n            \"name\": \"bikenode\",\n            \"short_name\": \"bikenode\",\n            \"icons\": [\n                {\n                    \"src\": \"/favicons/android-chrome-192x192.png\",\n                    \"sizes\": \"192x192\",\n                    \"type\": \"image/png\"\n                },\n                {\n                    \"src\": \"/favicons/android-chrome-512x512.png\",\n                    \"sizes\": \"512x512\",\n                    \"type\": \"image/png\"\n                }\n            ],\n            \"theme_color\": \"#5865F2\",\n            \"background_color\": \"#1a1c1f\",\n            \"display\": \"standalone\"\n        }\n        \n        import json\n        with open(os.path.join(output_dir, \"site.webmanifest\"), \"w\") as f:\n            json.dump(manifest, f, indent=2)\n        \n        # Copy favicon.png to root\n        shutil.copy2(os.path.join(output_dir, \"favicons/favicon-32x32.png\"), os.path.join(output_dir, \"favicon.png\"))\n        \n        # Print results\n        print(\"\\n✅ Generated Assets:\")\n        print(\"{:<40} {:<15} {:<12}\".format(\"FILENAME\", \"DIMENSIONS\", \"FILE SIZE\"))\n        print(\"-\" * 67)\n        for result in results:\n            print(\"{:<40} {:<15} {:<12}\".format(\n                result[\"filename\"], \n                result[\"size\"], \n                result[\"file_size\"]\n            ))\n        \n        print(\"\\n➡️ All assets have been saved to the '{}' directory\".format(output_dir))\n        print(\"➡️ Don't forget to update your HTML with the appropriate image references\")\n        \n        # Generate HTML snippet for inclusion\n        html_snippet = \"\"\"\n<!-- Favicon -->\n<link rel=\"icon\" href=\"/favicon.ico\" sizes=\"any\">\n<link rel=\"icon\" type=\"image/png\" href=\"/favicon.png\">\n<link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\">\n<link rel=\"manifest\" href=\"/site.webmanifest\">\n\n<!-- Social Media Meta Tags -->\n<meta property=\"og:image\" content=\"https://bikenode.com/social/og-image.png\">\n<meta name=\"twitter:image\" content=\"https://bikenode.com/social/twitter-card.png\">\n\"\"\"\n        \n        with open(os.path.join(output_dir, \"html-snippet.txt\"), \"w\") as f:\n            f.write(html_snippet)\n        \n        print(\"\\n➡️ HTML snippet saved to '{}/html-snippet.txt'\".format(output_dir))\n        \n        return True\n    \n    except Exception as e:\n        print(f\"Error processing image: {e}\")\n        return False\n\n\nif __name__ == \"__main__\":\n    # Get the directory of the script\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    \n    # Path to image.png (in the same directory as the script)\n    image_path = os.path.join(script_dir, \"image.png\")\n    \n    if not os.path.exists(image_path):\n        print(f\"Error: {image_path} not found!\")\n        sys.exit(1)\n    \n    # Create assets directory\n    output_directory = os.path.join(script_dir, \"assets\")\n    \n    # Generate all assets\n    create_image_assets(image_path, output_directory)"
        }
    ]
}