{
    "sourceFile": "images/optimize_image.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1740681378224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740740817821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n from PIL import Image\n import os\n import sys\n import shutil\n+import argparse\n \n def create_image_assets(source_image_path, output_dir=\"./assets\"):\n     \"\"\"\n-    Generate all necessary image assets for a website from a source image.\n     \n     Args:\n         source_image_path: Path to the source image\n         output_dir: Directory to save generated assets\n@@ -19,9 +19,9 @@\n         os.makedirs(os.path.join(output_dir, \"thumbnails\"))\n     \n     try:\n         # Open the source image\n-        img = Image.ox2pen(source_image_path)\n+        img = Image.open(source_image_path)\n         \n         # Print original image info\n         original_size = os.path.getsize(source_image_path) / 1024  # KB\n         print(f\"\\nOriginal image: {source_image_path}\")\n"
                },
                {
                    "date": 1740740827565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import argparse\n \n def create_image_assets(source_image_path, output_dir=\"./assets\"):\n     \"\"\"\n+    Generate all necessary image assets for a website from a source image.\n     \n     Args:\n         source_image_path: Path to the source image\n         output_dir: Directory to save generated assets\n@@ -186,21 +187,107 @@\n     except Exception as e:\n         print(f\"Error processing image: {e}\")\n         return False\n \n+def create_chrome_extension_icons(source_image_path, output_dir=\"./web_extension/chrome/images\"):\n+    \"\"\"\n+    Generate icon assets specifically for Chrome extensions.\n+    \n+    Args:\n+        source_image_path: Path to the source image\n+        output_dir: Directory to save generated extension icons\n+    \"\"\"\n+    # Create output directory if it doesn't exist\n+    if not os.path.exists(output_dir):\n+        os.makedirs(output_dir)\n+    \n+    try:\n+        # Open the source image\n+        img = Image.open(source_image_path)\n+        \n+        print(f\"\\nOriginal image: {source_image_path}\")\n\\ No newline at end of file\n+        print(f\"Generating Chrome extension icons...\")\n+        \n+        # Define icon sizes needed for Chrome extension\n+        extension_icons = {\n+            \"favicon-16x16.png\": (16, 16),\n+            \"favicon-32x32.png\": (32, 32),\n+            \"favicon-48x48.png\": (48, 48),\n+            \"favicon-64x64.png\": (64, 64),\n+            \"favicon-96x96.png\": (96, 96),\n+            \"mstile-150x150.png\": (150, 150)\n+        }\n+        \n+        # Generate each size\n+        results = []\n+        \n+        for filename, size in extension_icons.items():\n+            # Create a copy of the image to resize\n+            resized_img = img.copy()\n+            \n+            # Resize with high quality\n+            resized_img = resized_img.resize(size, Image.LANCZOS)\n+            \n+            # Create full output path directly in images directory\n+            output_path = os.path.join(output_dir, filename)\n+            \n+            # Save optimized version\n+            resized_img.save(\n+                output_path,\n+                optimize=True,\n+                quality=90,\n+                progressive=True\n+            )\n+            \n+            # Get file size\n+            file_size = os.path.getsize(output_path) / 1024  # KB\n+            \n+            results.append({\n+                \"filename\": filename,\n+                \"size\": f\"{size[0]}x{size[1]}\",\n+                \"file_size\": f\"{file_size:.2f} KB\"\n+            })\n+        \n+        # Print results\n+        print(\"\\n✅ Generated Chrome Extension Icons:\")\n+        print(\"{:<30} {:<15} {:<12}\".format(\"FILENAME\", \"DIMENSIONS\", \"FILE SIZE\"))\n+        print(\"-\" * 57)\n+        for result in results:\n+            print(\"{:<30} {:<15} {:<12}\".format(\n+                result[\"filename\"], \n+                result[\"size\"], \n+                result[\"file_size\"]\n+            ))\n+        \n+        print(f\"\\n➡️ All icons have been saved to '{output_dir}'\")\n+        \n+        return True\n+    \n+    except Exception as e:\n+        print(f\"Error processing image: {e}\")\n+        return False\n \n if __name__ == \"__main__\":\n+    parser = argparse.ArgumentParser(description=\"Generate image assets\")\n+    parser.add_argument(\"--chrome-ext\", action=\"store_true\", help=\"Generate Chrome extension icons\")\n+    parser.add_argument(\"--output\", default=None, help=\"Output directory\")\n+    parser.add_argument(\"--source\", default=None, help=\"Source image path\")\n+    args = parser.parse_args()\n+    \n     # Get the directory of the script\n     script_dir = os.path.dirname(os.path.abspath(__file__))\n     \n     # Path to image.png (in the same directory as the script)\n-    image_path = os.path.join(script_dir, \"image.png\")\n+    image_path = args.source if args.source else os.path.join(script_dir, \"image.png\")\n     \n     if not os.path.exists(image_path):\n         print(f\"Error: {image_path} not found!\")\n         sys.exit(1)\n-    \n-    # Create assets directory\n-    output_directory = os.path.join(script_dir, \"assets\")\n-    \n-    # Generate all assets\n-    create_image_assets(image_path, output_directory)\n+        \n+    if args.chrome_ext:\n+        # Generate Chrome extension icons\n+        ext_output_dir = args.output if args.output else os.path.join(os.path.dirname(script_dir), \"web_extension\", \"chrome\", \"images\")\n+        create_chrome_extension_icons(image_path, ext_output_dir)\n+    else:\n+        # Generate regular assets\n+        output_directory = args.output if args.output else os.path.join(script_dir, \"assets\")\n+        create_image_assets(image_path, output_directory)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740741232293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,81 +188,64 @@\n         print(f\"Error processing image: {e}\")\n         return False\n \n def create_chrome_extension_icons(source_image_path, output_dir=\"./web_extension/chrome/images\"):\n-    \"\"\"\n-    Generate icon assets specifically for Chrome extensions.\n-    \n-    Args:\n-        source_image_path: Path to the source image\n-        output_dir: Directory to save generated extension icons\n-    \"\"\"\n-    # Create output directory if it doesn't exist\n+    \"\"\"Generate proper Chrome extension icons while maintaining aspect ratio\"\"\"\n     if not os.path.exists(output_dir):\n         os.makedirs(output_dir)\n     \n     try:\n-        # Open the source image\n         img = Image.open(source_image_path)\n-        \n         print(f\"\\nOriginal image: {source_image_path}\")\n         print(f\"Generating Chrome extension icons...\")\n         \n-        # Define icon sizes needed for Chrome extension\n+        # Chrome extension standard icon sizes\n         extension_icons = {\n-            \"favicon-16x16.png\": (16, 16),\n-            \"favicon-32x32.png\": (32, 32),\n-            \"favicon-48x48.png\": (48, 48),\n-            \"favicon-64x64.png\": (64, 64),\n-            \"favicon-96x96.png\": (96, 96),\n-            \"mstile-150x150.png\": (150, 150)\n+            \"icon16.png\": 16,\n+            \"icon32.png\": 32,\n+            \"icon48.png\": 48,\n+            \"icon128.png\": 128\n         }\n         \n-        # Generate each size\n         results = []\n         \n         for filename, size in extension_icons.items():\n-            # Create a copy of the image to resize\n-            resized_img = img.copy()\n+            # Create a square version by cropping to maintain aspect ratio\n+            img_copy = img.copy()\n+            min_dimension = min(img_copy.width, img_copy.height)\n             \n-            # Resize with high quality\n-            resized_img = resized_img.resize(size, Image.LANCZOS)\n+            # Calculate crop box\n+            left = (img_copy.width - min_dimension) // 2\n+            top = (img_copy.height - min_dimension) // 2\n+            right = left + min_dimension\n+            bottom = top + min_dimension\n             \n-            # Create full output path directly in images directory\n+            # Crop to square and resize\n+            square_img = img_copy.crop((left, top, right, bottom))\n+            resized_img = square_img.resize((size, size), Image.LANCZOS)\n+            \n             output_path = os.path.join(output_dir, filename)\n+            resized_img.save(output_path, optimize=True, quality=90)\n             \n-            # Save optimized version\n-            resized_img.save(\n-                output_path,\n-                optimize=True,\n-                quality=90,\n-                progressive=True\n-            )\n-            \n-            # Get file size\n-            file_size = os.path.getsize(output_path) / 1024  # KB\n-            \n+            file_size = os.path.getsize(output_path) / 1024\n             results.append({\n                 \"filename\": filename,\n-                \"size\": f\"{size[0]}x{size[1]}\",\n+                \"size\": f\"{size}x{size}\",\n                 \"file_size\": f\"{file_size:.2f} KB\"\n             })\n         \n         # Print results\n         print(\"\\n✅ Generated Chrome Extension Icons:\")\n-        print(\"{:<30} {:<15} {:<12}\".format(\"FILENAME\", \"DIMENSIONS\", \"FILE SIZE\"))\n-        print(\"-\" * 57)\n+        print(\"{:<20} {:<15} {:<12}\".format(\"FILENAME\", \"DIMENSIONS\", \"FILE SIZE\"))\n+        print(\"-\" * 47)\n         for result in results:\n-            print(\"{:<30} {:<15} {:<12}\".format(\n-                result[\"filename\"], \n-                result[\"size\"], \n-                result[\"file_size\"]\n+            print(\"{:<20} {:<15} {:<12}\".format(\n+                result[\"filename\"], result[\"size\"], result[\"file_size\"]\n             ))\n         \n         print(f\"\\n➡️ All icons have been saved to '{output_dir}'\")\n+        return True\n         \n-        return True\n-    \n     except Exception as e:\n         print(f\"Error processing image: {e}\")\n         return False\n \n"
                },
                {
                    "date": 1740741646018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,272 +5,130 @@\n import argparse\n \n def create_image_assets(source_image_path, output_dir=\"./assets\"):\n     \"\"\"\n-    Generate all necessary image assets for a website from a source image.\n+    Generate favicon and other image assets from a source image.\n     \n     Args:\n         source_image_path: Path to the source image\n         output_dir: Directory to save generated assets\n     \"\"\"\n     # Create output directory if it doesn't exist\n     if not os.path.exists(output_dir):\n         os.makedirs(output_dir)\n-        os.makedirs(os.path.join(output_dir, \"favicons\"))\n-        os.makedirs(os.path.join(output_dir, \"social\"))\n-        os.makedirs(os.path.join(output_dir, \"thumbnails\"))\n     \n     try:\n         # Open the source image\n         img = Image.open(source_image_path)\n         \n-        # Print original image info\n-        original_size = os.path.getsize(source_image_path) / 1024  # KB\n         print(f\"\\nOriginal image: {source_image_path}\")\n-        print(f\"Dimensions: {img.width}x{img.height} pixels\")\n-        print(f\"File size: {original_size:.2f} KB\")\n-        print(f\"Format: {img.format}\")\n-        print(\"\\nGenerating assets...\")\n+        print(f\"Generating image assets...\")\n         \n-        # Define image sizes to generate\n-        sizes = {\n-            # Favicons\n-            \"favicons/favicon-16x16.png\": (16, 16),\n-            \"favicons/favicon-32x32.png\": (32, 32),\n-            \"favicons/favicon-48x48.png\": (48, 48),\n-            \"favicons/favicon-64x64.png\": (64, 64),\n-            \"favicons/favicon-96x96.png\": (96, 96),\n-            \n-            # iOS/Apple icons\n+        # Define favicon sizes\n+        favicon_sizes = {\n+            \"favicon.ico\": [(16, 16), (32, 32)],\n+            \"favicon-16x16.png\": (16, 16),\n+            \"favicon-32x32.png\": (32, 32),\n+            \"favicon-48x48.png\": (48, 48),\n+            \"favicon-64x64.png\": (64, 64),\n+            \"favicon-96x96.png\": (96, 96),\n+            \"favicon-128x128.png\": (128, 128),\n             \"apple-touch-icon.png\": (180, 180),\n-            \"apple-touch-icon-precomposed.png\": (180, 180),\n-            \n-            # Android icons\n-            \"favicons/android-chrome-192x192.png\": (192, 192),\n-            \"favicons/android-chrome-512x512.png\": (512, 512),\n-            \n-            # Microsoft icons\n-            \"favicons/mstile-150x150.png\": (150, 150),\n-            \n-            # Social media images\n-            \"social/og-image.png\": (1200, 630),  # Facebook/Open Graph\n-            \"social/twitter-card.png\": (1200, 600),  # Twitter\n-            \n-            # Thumbnails\n-            \"thumbnails/thumb-150x150.png\": (150, 150),\n-            \"thumbnails/thumb-300x300.png\": (300, 300),\n-            \"thumbnails/thumb-600x600.png\": (600, 600),\n-            \n-            # Website logo\n-            \"logo.png\": (512, 512),\n+            \"android-chrome-192x192.png\": (192, 192),\n+            \"android-chrome-512x512.png\": (512, 512),\n+            \"mstile-150x150.png\": (150, 150)\n         }\n         \n         # Generate each size\n         results = []\n         \n-        for filename, size in sizes.items():\n-            # Create a copy of the image to resize\n-            resized_img = img.copy()\n-            \n-            # Resize with high quality\n-            resized_img = resized_img.resize(size, Image.LANCZOS)\n-            \n-            # Create full output path\n-            output_path = os.path.join(output_dir, filename)\n-            \n-            # Ensure directory exists\n-            os.makedirs(os.path.dirname(output_path), exist_ok=True)\n-            \n-            # Save optimized version\n-            resized_img.save(\n-                output_path,\n-                optimize=True,\n-                quality=90,\n-                progressive=True\n-            )\n-            \n-            # Get file size\n-            file_size = os.path.getsize(output_path) / 1024  # KB\n-            \n-            results.append({\n-                \"filename\": filename,\n-                \"size\": f\"{size[0]}x{size[1]}\",\n-                \"file_size\": f\"{file_size:.2f} KB\"\n-            })\n-            \n-            # Special case for favicon.ico (multi-size ICO file)\n-            if filename == \"favicons/favicon-64x64.png\":\n-                ico_sizes = [(16, 16), (32, 32), (48, 48), (64, 64)]\n+        for filename, size in favicon_sizes.items():\n+            if filename == \"favicon.ico\":\n+                # Special handling for ICO file with multiple sizes\n+                ico_sizes = size\n                 ico_images = []\n                 \n                 for ico_size in ico_sizes:\n-                    ico_img = img.copy()\n-                    ico_img = ico_img.resize(ico_size, Image.LANCZOS)\n-                    ico_images.append(ico_img)\n+                    # Create a copy of the image to resize\n+                    resized_img = img.copy()\n+                    \n+                    # Create a square version of the image\n+                    min_dimension = min(resized_img.width, resized_img.height)\n+                    left = (resized_img.width - min_dimension) // 2\n+                    top = (resized_img.height - min_dimension) // 2\n+                    right = left + min_dimension\n+                    bottom = top + min_dimension\n+                    \n+                    square_img = resized_img.crop((left, top, right, bottom))\n+                    resized_img = square_img.resize(ico_size, Image.LANCZOS)\n+                    ico_images.append(resized_img)\n                 \n-                # Save as ICO file with multiple sizes\n-                ico_path = os.path.join(output_dir, \"favicon.ico\")\n+                # Save as ICO\n+                output_path = os.path.join(output_dir, filename)\n                 ico_images[0].save(\n-                    ico_path,\n+                    output_path,\n                     format=\"ICO\",\n-                    sizes=[(ico_images[i].width, ico_images[i].height) for i in range(len(ico_images))]\n+                    sizes=ico_sizes\n                 )\n                 \n-                ico_size = os.path.getsize(ico_path) / 1024\n+                # Get file size\n+                file_size = os.path.getsize(output_path) / 1024  # KB\n+                \n                 results.append({\n-                    \"filename\": \"favicon.ico\",\n-                    \"size\": \"16x16, 32x32, 48x48, 64x64\",\n-                    \"file_size\": f\"{ico_size:.2f} KB\"\n+                    \"filename\": filename,\n+                    \"size\": \", \".join([f\"{s[0]}x{s[1]}\" for s in ico_sizes]),\n+                    \"file_size\": f\"{file_size:.2f} KB\"\n                 })\n+                \n+            else:\n+                # Regular PNG files\n+                # Create a copy of the image to resize\n+                resized_img = img.copy()\n+                \n+                # Create a square version of the image\n+                min_dimension = min(resized_img.width, resized_img.height)\n+                left = (resized_img.width - min_dimension) // 2\n+                top = (resized_img.height - min_dimension) // 2\n+                right = left + min_dimension\n+                bottom = top + min_dimension\n+                \n+                square_img = resized_img.crop((left, top, right, bottom))\n+                resized_img = square_img.resize(size, Image.LANCZOS)\n+                \n+                # Save optimized PNG\n+                output_path = os.path.join(output_dir, filename)\n+                resized_img.save(\n+                    output_path,\n+                    optimize=True,\n+                    quality=90,\n+                    progressive=True\n+                )\n+                \n+                # Get file size\n+                file_size = os.path.getsize(output_path) / 1024  # KB\n+                \n+                results.append({\n+                    \"filename\": filename,\n+                    \"size\": f\"{size[0]}x{size[1]}\",\n+                    \"file_size\": f\"{file_size:.2f} KB\"\n+                })\n         \n-        # Create webmanifest file\n-        manifest = {\n-            \"name\": \"bikenode\",\n-            \"short_name\": \"bikenode\",\n-            \"icons\": [\n-                {\n-                    \"src\": \"/favicons/android-chrome-192x192.png\",\n-                    \"sizes\": \"192x192\",\n-                    \"type\": \"image/png\"\n-                },\n-                {\n-                    \"src\": \"/favicons/android-chrome-512x512.png\",\n-                    \"sizes\": \"512x512\",\n-                    \"type\": \"image/png\"\n-                }\n-            ],\n-            \"theme_color\": \"#5865F2\",\n-            \"background_color\": \"#1a1c1f\",\n-            \"display\": \"standalone\"\n-        }\n-        \n-        import json\n-        with open(os.path.join(output_dir, \"site.webmanifest\"), \"w\") as f:\n-            json.dump(manifest, f, indent=2)\n-        \n-        # Copy favicon.png to root\n-        shutil.copy2(os.path.join(output_dir, \"favicons/favicon-32x32.png\"), os.path.join(output_dir, \"favicon.png\"))\n-        \n         # Print results\n-        print(\"\\n✅ Generated Assets:\")\n-        print(\"{:<40} {:<15} {:<12}\".format(\"FILENAME\", \"DIMENSIONS\", \"FILE SIZE\"))\n-        print(\"-\" * 67)\n+        print(\"\\n✅ Generated Image Assets:\")\n+        print(\"{:<30} {:<15} {:<12}\".format(\"FILENAME\", \"DIMENSIONS\", \"FILE SIZE\"))\n+        print(\"-\" * 57)\n         for result in results:\n-            print(\"{:<40} {:<15} {:<12}\".format(\n+            print(\"{:<30} {:<15} {:<12}\".format(\n                 result[\"filename\"], \n                 result[\"size\"], \n                 result[\"file_size\"]\n             ))\n         \n-        print(\"\\n➡️ All assets have been saved to the '{}' directory\".format(output_dir))\n-        print(\"➡️ Don't forget to update your HTML with the appropriate image references\")\n+        print(f\"\\n➡️ All assets have been saved to '{output_dir}'\")\n         \n-        # Generate HTML snippet for inclusion\n-        html_snippet = \"\"\"\n-<!-- Favicon -->\n-<link rel=\"icon\" href=\"/favicon.ico\" sizes=\"any\">\n-<link rel=\"icon\" type=\"image/png\" href=\"/favicon.png\">\n-<link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\">\n-<link rel=\"manifest\" href=\"/site.webmanifest\">\n-\n-<!-- Social Media Meta Tags -->\n-<meta property=\"og:image\" content=\"https://bikenode.com/social/og-image.png\">\n-<meta name=\"twitter:image\" content=\"https://bikenode.com/social/twitter-card.png\">\n-\"\"\"\n-        \n-        with open(os.path.join(output_dir, \"html-snippet.txt\"), \"w\") as f:\n-            f.write(html_snippet)\n-        \n-        print(\"\\n➡️ HTML snippet saved to '{}/html-snippet.txt'\".format(output_dir))\n-        \n         return True\n     \n     except Exception as e:\n         print(f\"Error processing image: {e}\")\n         return False\n \n-def create_chrome_extension_icons(source_image_path, output_dir=\"./web_extension/chrome/images\"):\n-    \"\"\"Generate proper Chrome extension icons while maintaining aspect ratio\"\"\"\n-    if not os.path.exists(output_dir):\n-        os.makedirs(output_dir)\n-    \n-    try:\n-        img = Image.open(source_image_path)\n\\ No newline at end of file\n-        print(f\"\\nOriginal image: {source_image_path}\")\n-        print(f\"Generating Chrome extension icons...\")\n-        \n-        # Chrome extension standard icon sizes\n-        extension_icons = {\n-            \"icon16.png\": 16,\n-            \"icon32.png\": 32,\n-            \"icon48.png\": 48,\n-            \"icon128.png\": 128\n-        }\n-        \n-        results = []\n-        \n-        for filename, size in extension_icons.items():\n-            # Create a square version by cropping to maintain aspect ratio\n-            img_copy = img.copy()\n-            min_dimension = min(img_copy.width, img_copy.height)\n-            \n-            # Calculate crop box\n-            left = (img_copy.width - min_dimension) // 2\n-            top = (img_copy.height - min_dimension) // 2\n-            right = left + min_dimension\n-            bottom = top + min_dimension\n-            \n-            # Crop to square and resize\n-            square_img = img_copy.crop((left, top, right, bottom))\n-            resized_img = square_img.resize((size, size), Image.LANCZOS)\n-            \n-            output_path = os.path.join(output_dir, filename)\n-            resized_img.save(output_path, optimize=True, quality=90)\n-            \n-            file_size = os.path.getsize(output_path) / 1024\n-            results.append({\n-                \"filename\": filename,\n-                \"size\": f\"{size}x{size}\",\n-                \"file_size\": f\"{file_size:.2f} KB\"\n-            })\n-        \n-        # Print results\n-        print(\"\\n✅ Generated Chrome Extension Icons:\")\n-        print(\"{:<20} {:<15} {:<12}\".format(\"FILENAME\", \"DIMENSIONS\", \"FILE SIZE\"))\n-        print(\"-\" * 47)\n-        for result in results:\n-            print(\"{:<20} {:<15} {:<12}\".format(\n-                result[\"filename\"], result[\"size\"], result[\"file_size\"]\n-            ))\n-        \n-        print(f\"\\n➡️ All icons have been saved to '{output_dir}'\")\n-        return True\n-        \n-    except Exception as e:\n-        print(f\"Error processing image: {e}\")\n-        return False\n-\n-if __name__ == \"__main__\":\n-    parser = argparse.ArgumentParser(description=\"Generate image assets\")\n-    parser.add_argument(\"--chrome-ext\", action=\"store_true\", help=\"Generate Chrome extension icons\")\n-    parser.add_argument(\"--output\", default=None, help=\"Output directory\")\n-    parser.add_argument(\"--source\", default=None, help=\"Source image path\")\n-    args = parser.parse_args()\n-    \n-    # Get the directory of the script\n-    script_dir = os.path.dirname(os.path.abspath(__file__))\n-    \n-    # Path to image.png (in the same directory as the script)\n-    image_path = args.source if args.source else os.path.join(script_dir, \"image.png\")\n-    \n-    if not os.path.exists(image_path):\n-        print(f\"Error: {image_path} not found!\")\n-        sys.exit(1)\n-        \n-    if args.chrome_ext:\n-        # Generate Chrome extension icons\n-        ext_output_dir = args.output if args.output else os.path.join(os.path.dirname(script_dir), \"web_extension\", \"chrome\", \"images\")\n-        create_chrome_extension_icons(image_path, ext_output_dir)\n-    else:\n-        # Generate regular assets\n-        output_directory = args.output if args.output else os.path.join(script_dir, \"assets\")\n-        create_image_assets(image_path, output_directory)\n+def create_chrome_extension_icons(source_image_path, output_dir\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740742091024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,5 +130,32 @@\n     except Exception as e:\n         print(f\"Error processing image: {e}\")\n         return False\n \n-def create_chrome_extension_icons(source_image_path, output_dir\n\\ No newline at end of file\n+def create_chrome_extension_icons(source_image_path, output_dir=\"./web_extension/chrome/images\"):\n+    \"\"\"Generate proper Chrome extension icons while maintaining aspect ratio\"\"\"\n+    if not os.path.exists(output_dir):\n+        os.makedirs(output_dir)\n+    \n+    try:\n+        img = Image.open(source_image_path)\n+        print(f\"\\nOriginal image: {source_image_path}\")\n+        print(f\"Generating Chrome extension icons...\")\n+        \n+        # Chrome extension standard icon sizes\n+        extension_icons = {\n+            \"icon16.png\": 16,\n+            \"icon32.png\": 32,\n+            \"icon48.png\": 48,\n+            \"icon128.png\": 128\n+        }\n+        \n+        results = []\n+        \n+        for filename, size in extension_icons.items():\n+            # Create a square version by cropping to maintain aspect ratio\n+            img_copy = img.copy()\n+            min_dimension = min(img_copy.width, img_copy.height)\n+            \n+            # Calculate crop box\n+            left = (img_copy.width - min_dimension) // 2\n+            top = (img_copy.height - min_dimension) // 2\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740742096617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,5 +157,31 @@\n             min_dimension = min(img_copy.width, img_copy.height)\n             \n             # Calculate crop box\n             left = (img_copy.width - min_dimension) // 2\n-            top = (img_copy.height - min_dimension) // 2\n\\ No newline at end of file\n+            top = (img_copy.height - min_dimension) // 2\n+            right = left + min_dimension\n+            bottom = top + min_dimension\n+            \n+            # Crop to square and resize\n+            square_img = img_copy.crop((left, top, right, bottom))\n+            resized_img = square_img.resize((size, size), Image.LANCZOS)\n+            \n+            output_path = os.path.join(output_dir, filename)\n+            resized_img.save(output_path, optimize=True, quality=90)\n+            \n+            file_size = os.path.getsize(output_path) / 1024\n+            results.append({\n+                \"filename\": filename,\n+                \"size\": f\"{size}x{size}\",\n+                \"file_size\": f\"{file_size:.2f} KB\"\n+            })\n+        \n+        # Print results\n+        print(\"\\n✅ Generated Chrome Extension Icons:\")\n+        print(\"{:<20} {:<15} {:<12}\".format(\"FILENAME\", \"DIMENSIONS\", \"FILE SIZE\"))\n+        print(\"-\" * 47)\n+        for result in results:\n+            print(\"{:<20} {:<15} {:<12}\".format(\n+                result[\"filename\"], result[\"size\"], result[\"file_size\"]\n+            ))\n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740742101818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,5 +191,7 @@\n     except Exception as e:\n         print(f\"Error processing image: {e}\")\n         return False\n \n-if __name__ == \"__main__\":\n\\ No newline at end of file\n+if __name__ == \"__main__\":\n+    parser = argparse.ArgumentParser(description=\"Generate image assets\")\n+    parser.add_argument(\"--chrome-ext\", action=\"store_true\", help=\"Generate Chrome extension icons\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740742109714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,5 +213,7 @@\n         # Generate Chrome extension icons\n         ext_output_dir = args.output if args.output else os.path.join(os.path.dirname(script_dir), \"web_extension\", \"chrome\", \"images\")\n         create_chrome_extension_icons(image_path, ext_output_dir)\n     else:\n-        # Generate regular assets\n\\ No newline at end of file\n+        # Generate regular assets\n+        output_directory = args.output if args.output else os.path.join(script_dir, \"assets\")\n+        create_image_assets(image_path, output_directory)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740681378224,
            "name": "Commit-0",
            "content": "from PIL import Image\nimport os\nimport sys\nimport shutil\n\ndef create_image_assets(source_image_path, output_dir=\"./assets\"):\n    \"\"\"\n    Generate all necessary image assets for a website from a source image.\n    \n    Args:\n        source_image_path: Path to the source image\n        output_dir: Directory to save generated assets\n    \"\"\"\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n        os.makedirs(os.path.join(output_dir, \"favicons\"))\n        os.makedirs(os.path.join(output_dir, \"social\"))\n        os.makedirs(os.path.join(output_dir, \"thumbnails\"))\n    \n    try:\n        # Open the source image\n        img = Image.ox2pen(source_image_path)\n        \n        # Print original image info\n        original_size = os.path.getsize(source_image_path) / 1024  # KB\n        print(f\"\\nOriginal image: {source_image_path}\")\n        print(f\"Dimensions: {img.width}x{img.height} pixels\")\n        print(f\"File size: {original_size:.2f} KB\")\n        print(f\"Format: {img.format}\")\n        print(\"\\nGenerating assets...\")\n        \n        # Define image sizes to generate\n        sizes = {\n            # Favicons\n            \"favicons/favicon-16x16.png\": (16, 16),\n            \"favicons/favicon-32x32.png\": (32, 32),\n            \"favicons/favicon-48x48.png\": (48, 48),\n            \"favicons/favicon-64x64.png\": (64, 64),\n            \"favicons/favicon-96x96.png\": (96, 96),\n            \n            # iOS/Apple icons\n            \"apple-touch-icon.png\": (180, 180),\n            \"apple-touch-icon-precomposed.png\": (180, 180),\n            \n            # Android icons\n            \"favicons/android-chrome-192x192.png\": (192, 192),\n            \"favicons/android-chrome-512x512.png\": (512, 512),\n            \n            # Microsoft icons\n            \"favicons/mstile-150x150.png\": (150, 150),\n            \n            # Social media images\n            \"social/og-image.png\": (1200, 630),  # Facebook/Open Graph\n            \"social/twitter-card.png\": (1200, 600),  # Twitter\n            \n            # Thumbnails\n            \"thumbnails/thumb-150x150.png\": (150, 150),\n            \"thumbnails/thumb-300x300.png\": (300, 300),\n            \"thumbnails/thumb-600x600.png\": (600, 600),\n            \n            # Website logo\n            \"logo.png\": (512, 512),\n        }\n        \n        # Generate each size\n        results = []\n        \n        for filename, size in sizes.items():\n            # Create a copy of the image to resize\n            resized_img = img.copy()\n            \n            # Resize with high quality\n            resized_img = resized_img.resize(size, Image.LANCZOS)\n            \n            # Create full output path\n            output_path = os.path.join(output_dir, filename)\n            \n            # Ensure directory exists\n            os.makedirs(os.path.dirname(output_path), exist_ok=True)\n            \n            # Save optimized version\n            resized_img.save(\n                output_path,\n                optimize=True,\n                quality=90,\n                progressive=True\n            )\n            \n            # Get file size\n            file_size = os.path.getsize(output_path) / 1024  # KB\n            \n            results.append({\n                \"filename\": filename,\n                \"size\": f\"{size[0]}x{size[1]}\",\n                \"file_size\": f\"{file_size:.2f} KB\"\n            })\n            \n            # Special case for favicon.ico (multi-size ICO file)\n            if filename == \"favicons/favicon-64x64.png\":\n                ico_sizes = [(16, 16), (32, 32), (48, 48), (64, 64)]\n                ico_images = []\n                \n                for ico_size in ico_sizes:\n                    ico_img = img.copy()\n                    ico_img = ico_img.resize(ico_size, Image.LANCZOS)\n                    ico_images.append(ico_img)\n                \n                # Save as ICO file with multiple sizes\n                ico_path = os.path.join(output_dir, \"favicon.ico\")\n                ico_images[0].save(\n                    ico_path,\n                    format=\"ICO\",\n                    sizes=[(ico_images[i].width, ico_images[i].height) for i in range(len(ico_images))]\n                )\n                \n                ico_size = os.path.getsize(ico_path) / 1024\n                results.append({\n                    \"filename\": \"favicon.ico\",\n                    \"size\": \"16x16, 32x32, 48x48, 64x64\",\n                    \"file_size\": f\"{ico_size:.2f} KB\"\n                })\n        \n        # Create webmanifest file\n        manifest = {\n            \"name\": \"bikenode\",\n            \"short_name\": \"bikenode\",\n            \"icons\": [\n                {\n                    \"src\": \"/favicons/android-chrome-192x192.png\",\n                    \"sizes\": \"192x192\",\n                    \"type\": \"image/png\"\n                },\n                {\n                    \"src\": \"/favicons/android-chrome-512x512.png\",\n                    \"sizes\": \"512x512\",\n                    \"type\": \"image/png\"\n                }\n            ],\n            \"theme_color\": \"#5865F2\",\n            \"background_color\": \"#1a1c1f\",\n            \"display\": \"standalone\"\n        }\n        \n        import json\n        with open(os.path.join(output_dir, \"site.webmanifest\"), \"w\") as f:\n            json.dump(manifest, f, indent=2)\n        \n        # Copy favicon.png to root\n        shutil.copy2(os.path.join(output_dir, \"favicons/favicon-32x32.png\"), os.path.join(output_dir, \"favicon.png\"))\n        \n        # Print results\n        print(\"\\n✅ Generated Assets:\")\n        print(\"{:<40} {:<15} {:<12}\".format(\"FILENAME\", \"DIMENSIONS\", \"FILE SIZE\"))\n        print(\"-\" * 67)\n        for result in results:\n            print(\"{:<40} {:<15} {:<12}\".format(\n                result[\"filename\"], \n                result[\"size\"], \n                result[\"file_size\"]\n            ))\n        \n        print(\"\\n➡️ All assets have been saved to the '{}' directory\".format(output_dir))\n        print(\"➡️ Don't forget to update your HTML with the appropriate image references\")\n        \n        # Generate HTML snippet for inclusion\n        html_snippet = \"\"\"\n<!-- Favicon -->\n<link rel=\"icon\" href=\"/favicon.ico\" sizes=\"any\">\n<link rel=\"icon\" type=\"image/png\" href=\"/favicon.png\">\n<link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\">\n<link rel=\"manifest\" href=\"/site.webmanifest\">\n\n<!-- Social Media Meta Tags -->\n<meta property=\"og:image\" content=\"https://bikenode.com/social/og-image.png\">\n<meta name=\"twitter:image\" content=\"https://bikenode.com/social/twitter-card.png\">\n\"\"\"\n        \n        with open(os.path.join(output_dir, \"html-snippet.txt\"), \"w\") as f:\n            f.write(html_snippet)\n        \n        print(\"\\n➡️ HTML snippet saved to '{}/html-snippet.txt'\".format(output_dir))\n        \n        return True\n    \n    except Exception as e:\n        print(f\"Error processing image: {e}\")\n        return False\n\n\nif __name__ == \"__main__\":\n    # Get the directory of the script\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    \n    # Path to image.png (in the same directory as the script)\n    image_path = os.path.join(script_dir, \"image.png\")\n    \n    if not os.path.exists(image_path):\n        print(f\"Error: {image_path} not found!\")\n        sys.exit(1)\n    \n    # Create assets directory\n    output_directory = os.path.join(script_dir, \"assets\")\n    \n    # Generate all assets\n    create_image_assets(image_path, output_directory)"
        }
    ]
}