{
    "sourceFile": "__tests__/messaging.unit.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740793245367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740793245367,
            "name": "Commit-0",
            "content": "describe('Chrome Extension Messaging Tests', () => {\n  // Mock the chrome API\n  global.chrome = {\n    runtime: {\n      onMessage: {\n        addListener: jest.fn()\n      }\n    }\n  };\n  \n  // Import content script to register listener\n  require('../web_extension/chrome/content.js');\n  \n  // Capture the message handler function\n  const messageHandler = chrome.runtime.onMessage.addListener.mock.calls[0][0];\n  \n  beforeEach(() => {\n    // Setup DOM for testing\n    document.body.innerHTML = `<div id=\"titletextonly\">Test Bike</div>`;\n  });\n  \n  test('responds with success when extraction works', () => {\n    const mockSendResponse = jest.fn();\n    \n    // Call the message handler with a convertToJson action\n    messageHandler({action: 'convertToJson'}, {}, mockSendResponse);\n    \n    // Verify response\n    expect(mockSendResponse).toHaveBeenCalledWith(\n      expect.objectContaining({\n        success: true,\n        data: expect.objectContaining({\n          title: 'Test Bike'\n        })\n      })\n    );\n  });\n  \n  test('responds with error when extraction fails', () => {\n    // Remove title element to cause extraction to fail\n    document.body.innerHTML = '';\n    \n    const mockSendResponse = jest.fn();\n    messageHandler({action: 'convertToJson'}, {}, mockSendResponse);\n    \n    expect(mockSendResponse).toHaveBeenCalledWith(\n      expect.objectContaining({\n        success: false,\n        error: expect.stringContaining('Could not find post title')\n      })\n    );\n  });\n});"
        }
    ]
}