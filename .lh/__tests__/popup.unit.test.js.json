{
    "sourceFile": "__tests__/popup.unit.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1740774320459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740784056094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n-import '../web_extension/chrome/popup.js';\n-import { someFunction } from '../web_extension/chrome/popup.js';\n+// Replace ES module imports with CommonJS require\n+const popupModule = require('../web_extension/chrome/popup.js');\n+const { someFunction } = popupModule;\n \n // Setup chrome API mock for all tests\n global.chrome = {\n   tabs: {\n"
                }
            ],
            "date": 1740774320459,
            "name": "Commit-0",
            "content": "import '../web_extension/chrome/popup.js';\nimport { someFunction } from '../web_extension/chrome/popup.js';\n\n// Setup chrome API mock for all tests\nglobal.chrome = {\n  tabs: {\n    query: jest.fn(),\n    sendMessage: jest.fn()\n  }\n};\n\n// Mock document methods not in jsdom\ndocument.execCommand = jest.fn();\n\ndescribe('Popup.js Unit Tests', () => {\n  beforeEach(() => {\n    // Set up document body\n    document.body.innerHTML = `\n      <div class=\"container\">\n        <h1>Craigslist to JSON</h1>\n        <div id=\"status-message\">Navigate to a Craigslist post to convert it</div>\n        <button id=\"convert-button\">Convert to JSON</button>\n        <div class=\"json-container\" style=\"display: none;\">\n          <textarea id=\"json-output\" readonly></textarea>\n          <button id=\"copy-button\">Copy to Clipboard</button>\n        </div>\n      </div>\n    `;\n    \n    // Reset mocks\n    jest.clearAllMocks();\n    \n    // Simulate DOM content loaded to initialize event listeners\n    document.dispatchEvent(new Event('DOMContentLoaded'));\n  });\n\n  test('someFunction returns expected value', () => {\n    expect(someFunction()).toBe('expected value');\n  });\n\n  test('should disable button when not on Craigslist page', () => {\n    // Setup\n    chrome.tabs.query.mockImplementation((query, callback) => {\n      callback([{ url: 'https://example.com' }]);\n    });\n    \n    // Re-trigger initialization\n    document.dispatchEvent(new Event('DOMContentLoaded'));\n    \n    // Assert\n    expect(document.getElementById('status-message').textContent).toBe('Please navigate to a Craigslist post');\n    expect(document.getElementById('convert-button').disabled).toBe(true);\n  });\n\n  test('should handle successful conversion', () => {\n    // Setup - simulate on Craigslist page\n    chrome.tabs.query.mockImplementation((query, callback) => {\n      callback([{ id: 123, url: 'https://craigslist.org/post' }]);\n    });\n    \n    // Mock successful response from content script\n    chrome.tabs.sendMessage.mockImplementation((tabId, message, callback) => {\n      expect(message.action).toBe('convertToJson');\n      callback({ \n        success: true, \n        data: { title: 'Test Bike', price: '$100' } \n      });\n    });\n    \n    // Trigger convert button click\n    document.getElementById('convert-button').click();\n    \n    // Assertions\n    expect(document.getElementById('status-message').textContent).toBe('Conversion successful!');\n    expect(document.getElementById('json-output').value).toContain('Test Bike');\n    expect(document.querySelector('.json-container').style.display).toBe('flex');\n  });\n\n  test('should handle failed conversion', () => {\n    // Setup\n    chrome.tabs.query.mockImplementation((query, callback) => {\n      callback([{ id: 123, url: 'https://craigslist.org/post' }]);\n    });\n    \n    // Mock failed response\n    chrome.tabs.sendMessage.mockImplementation((tabId, message, callback) => {\n      callback({ \n        success: false, \n        error: 'Could not extract data' \n      });\n    });\n    \n    // Trigger convert button click\n    document.getElementById('convert-button').click();\n    \n    // Assertions\n    expect(document.getElementById('status-message').textContent).toBe('Conversion failed: Could not extract data');\n  });\n\n  test('should copy text to clipboard', () => {\n    // Set up textarea content\n    document.getElementById('json-output').value = '{\"test\": \"data\"}';\n    \n    // Click copy button\n    document.getElementById('copy-button').click();\n    \n    // Verify execCommand was called\n    expect(document.execCommand).toHaveBeenCalledWith('copy');\n    \n    // Verify button text changed\n    expect(document.getElementById('copy-button').textContent).toBe('Copied!');\n    \n    // Fast-forward timers\n    jest.useFakeTimers();\n    jest.advanceTimersByTime(1500);\n    \n    // Verify text resets\n    expect(document.getElementById('copy-button').textContent).toBe('Copy to Clipboard');\n  });\n});"
        }
    ]
}