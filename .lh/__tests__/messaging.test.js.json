{
    "sourceFile": "__tests__/messaging.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1740792315032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740794520051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,21 @@\n   let mockSendResponse;\n   let messageListener;\n   \n   beforeEach(() => {\n-    // Capture the message listener function\n+    // Set up the Chrome mock\n+    global.chrome = {\n+      runtime: {\n+        onMessage: {\n+          addListener: jest.fn()\n+        }\n+      }\n+    };\n+    \n+    // Import content script to register the listener\n+    require('../web_extension/chrome/content.js');\n+    \n+    // Now the listener should be registered\n     messageListener = chrome.runtime.onMessage.addListener.mock.calls[0][0];\n     mockSendResponse = jest.fn();\n     \n     // Set up DOM\n"
                },
                {
                    "date": 1740795326444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+// Mock chrome API\n+const chrome = {\n+  runtime: {\n+    onMessage: {\n+      addListener: jest.fn(callback => {\n+        // Store the callback immediately when it's registered\n+        chrome.runtime.onMessage.handler = callback;\n+      })\n+    }\n+  }\n+};\n+\n+// Set up global chrome object\n+global.chrome = chrome;\n+\n+// Import content script AFTER mock is set up\n+    // Set up the Chrome mock\n+    global.chrome = {\n+      runtime: {\n+        onMessage: {\n+          addListener: jest.fn()\n+        }\n+      }\n+    };\n+    \n+    // Import content script to register the listener\n+    require('../web_extension/chrome/content.js');\n+    \n+    // Now the listener should be registered\n+    messageListener = chrome.runtime.onMessage.addListener.mock.calls[0][0];\n+    mockSendResponse = jest.fn();\n+    \n+    // Set up DOM\n+    document.body.innerHTML = `<div id=\"titletextonly\">Test Bike</div>`;\n+  });\n+  \n+  test('responds with data on convertToJson message', () => {\n+    messageListener({action: 'convertToJson'}, {}, mockSendResponse);\n+    expect(mockSendResponse).toHaveBeenCalledWith(expect.objectContaining({\n+      success: true,\n+      data: expect.objectContaining({title: 'Test Bike'})\n+    }));\n+  });\n+  \n+  test('returns error when data extraction fails', () => {\n+    document.body.innerHTML = ''; // Empty DOM will cause extraction to fail\n+    messageListener({action: 'convertToJson'}, {}, mockSendResponse);\n+    expect(mockSendResponse).toHaveBeenCalledWith(expect.objectContaining({\n+      success: false,\n+      error: expect.any(String)\n+    }));\n+  });\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740795332945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,94 +13,36 @@\n // Set up global chrome object\n global.chrome = chrome;\n \n // Import content script AFTER mock is set up\n-    // Set up the Chrome mock\n-    global.chrome = {\n-      runtime: {\n-        onMessage: {\n-          addListener: jest.fn()\n-        }\n-      }\n-    };\n-    \n-    // Import content script to register the listener\n-    require('../web_extension/chrome/content.js');\n-    \n-    // Now the listener should be registered\n-    messageListener = chrome.runtime.onMessage.addListener.mock.calls[0][0];\n-    mockSendResponse = jest.fn();\n-    \n-    // Set up DOM\n-    document.body.innerHTML = `<div id=\"titletextonly\">Test Bike</div>`;\n-  });\n-  \n-  test('responds with data on convertToJson message', () => {\n-    messageListener({action: 'convertToJson'}, {}, mockSendResponse);\n-    expect(mockSendResponse).toHaveBeenCalledWith(expect.objectContaining({\n-      success: true,\n-      data: expect.objectContaining({title: 'Test Bike'})\n-    }));\n-  });\n-  \n-  test('returns error when data extraction fails', () => {\n-    document.body.innerHTML = ''; // Empty DOM will cause extraction to fail\n-    messageListener({action: 'convertToJson'}, {}, mockSendResponse);\n-    expect(mockSendResponse).toHaveBeenCalledWith(expect.objectContaining({\n-      success: false,\n-      error: expect.any(String)\n-    }));\n-  });\n-});\n-// Mock chrome API\n-global.chrome = {\n-  runtime: {\n-    onMessage: {\n-      addListener: jest.fn()\n-    }\n-  }\n-};\n+require('../web_extension/chrome/content.js');\n \n-const contentScript = require('../web_extension/chrome/content.js');\n-\n describe('Chrome Extension Message Handling', () => {\n   let mockSendResponse;\n-  let messageListener;\n   \n   beforeEach(() => {\n-    // Set up the Chrome mock\n-    global.chrome = {\n-      runtime: {\n-        onMessage: {\n-          addListener: jest.fn()\n-        }\n-      }\n-    };\n-    \n-    // Import content script to register the listener\n-    require('../web_extension/chrome/content.js');\n-    \n-    // Now the listener should be registered\n-    messageListener = chrome.runtime.onMessage.addListener.mock.calls[0][0];\n+    // Use the stored handler instead of accessing mock.calls\n     mockSendResponse = jest.fn();\n     \n     // Set up DOM\n     document.body.innerHTML = `<div id=\"titletextonly\">Test Bike</div>`;\n   });\n   \n   test('responds with data on convertToJson message', () => {\n-    messageListener({action: 'convertToJson'}, {}, mockSendResponse);\n+    chrome.runtime.onMessage.handler({action: 'convertToJson'}, {}, mockSendResponse);\n+    \n     expect(mockSendResponse).toHaveBeenCalledWith(expect.objectContaining({\n       success: true,\n       data: expect.objectContaining({title: 'Test Bike'})\n     }));\n   });\n   \n   test('returns error when data extraction fails', () => {\n     document.body.innerHTML = ''; // Empty DOM will cause extraction to fail\n-    messageListener({action: 'convertToJson'}, {}, mockSendResponse);\n+    chrome.runtime.onMessage.handler({action: 'convertToJson'}, {}, mockSendResponse);\n+    \n     expect(mockSendResponse).toHaveBeenCalledWith(expect.objectContaining({\n       success: false,\n-      error: expect.any(String)\n+      error: expect.stringContaining('Could not find post title')\n     }));\n   });\n });\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740792315032,
            "name": "Commit-0",
            "content": "// Mock chrome API\nglobal.chrome = {\n  runtime: {\n    onMessage: {\n      addListener: jest.fn()\n    }\n  }\n};\n\nconst contentScript = require('../web_extension/chrome/content.js');\n\ndescribe('Chrome Extension Message Handling', () => {\n  let mockSendResponse;\n  let messageListener;\n  \n  beforeEach(() => {\n    // Capture the message listener function\n    messageListener = chrome.runtime.onMessage.addListener.mock.calls[0][0];\n    mockSendResponse = jest.fn();\n    \n    // Set up DOM\n    document.body.innerHTML = `<div id=\"titletextonly\">Test Bike</div>`;\n  });\n  \n  test('responds with data on convertToJson message', () => {\n    messageListener({action: 'convertToJson'}, {}, mockSendResponse);\n    expect(mockSendResponse).toHaveBeenCalledWith(expect.objectContaining({\n      success: true,\n      data: expect.objectContaining({title: 'Test Bike'})\n    }));\n  });\n  \n  test('returns error when data extraction fails', () => {\n    document.body.innerHTML = ''; // Empty DOM will cause extraction to fail\n    messageListener({action: 'convertToJson'}, {}, mockSendResponse);\n    expect(mockSendResponse).toHaveBeenCalledWith(expect.objectContaining({\n      success: false,\n      error: expect.any(String)\n    }));\n  });\n});"
        }
    ]
}