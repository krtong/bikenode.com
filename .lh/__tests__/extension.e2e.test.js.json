{
    "sourceFile": "__tests__/extension.e2e.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740774156092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740774156092,
            "name": "Commit-0",
            "content": "const puppeteer = require('puppeteer');\nconst path = require('path');\n\ndescribe('Chrome Extension E2E Tests', () => {\n  let browser;\n  let page;\n  const extensionPath = path.resolve(__dirname, '../web_extension/chrome');\n\n  beforeAll(async () => {\n    // Launch browser with the extension loaded\n    browser = await puppeteer.launch({\n      headless: false, // Extensions require non-headless mode\n      args: [\n        `--disable-extensions-except=${extensionPath}`,\n        `--load-extension=${extensionPath}`,\n        '--no-sandbox'\n      ]\n    });\n    \n    // Wait for extension to load fully\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }, 30000);\n\n  afterAll(async () => {\n    if (browser) await browser.close();\n  });\n\n  test('Extension loads and popup displays correctly', async () => {\n    // Get the extension background page target\n    const targets = await browser.targets();\n    const extTarget = targets.find(target => \n      target.type() === 'background_page' || \n      (target.type() === 'service_worker' && target.url().includes('chrome-extension://'))\n    );\n    \n    if (!extTarget) {\n      throw new Error('Extension background page not found');\n    }\n    \n    // Get extension ID from the background page URL\n    const extensionUrl = extTarget.url();\n    const extensionID = extensionUrl.split('/')[2];\n    \n    // Open extension popup\n    page = await browser.newPage();\n    await page.goto(`chrome-extension://${extensionID}/popup.html`);\n    \n    // Verify popup contents\n    const title = await page.$eval('h1', el => el.textContent);\n    expect(title).toBe('Craigslist to JSON');\n    \n    const buttonText = await page.$eval('#convert-button', button => button.textContent);\n    expect(buttonText).toBe('Convert to JSON');\n    \n    const statusMessage = await page.$eval('#status-message', el => el.textContent);\n    expect(statusMessage).toContain('Navigate to a Craigslist post');\n  }, 15000);\n});"
        }
    ]
}