{
    "sourceFile": "__tests__/popup.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1740694325217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740694330780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,5 +21,7 @@\n });\n \n import { someFunction } from '../web_extension/chrome/popup';\n \n-test('hello world!', () => {\n\\ No newline at end of file\n+test('hello world!', () => {\n+\texpect(someFunction()).toBe('expected value');\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740771732969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,5 +23,10 @@\n import { someFunction } from '../web_extension/chrome/popup';\n \n test('hello world!', () => {\n \texpect(someFunction()).toBe('expected value');\n-});\n\\ No newline at end of file\n+});\n+\n+describe('Content Script', () => {\n+  beforeEach(() => {\n+    // Mock DOM elements for testing\n+    document.body.innerHTML = `\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740771739402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,5 +28,35 @@\n \n describe('Content Script', () => {\n   beforeEach(() => {\n     // Mock DOM elements for testing\n-    document.body.innerHTML = `\n\\ No newline at end of file\n+    document.body.innerHTML = `\n+      <div id=\"titletextonly\">2018 Trek Bike</div>\n+      <span class=\"price\">$500</span>\n+      <time class=\"date timeago\">2023-06-15</time>\n+      <div class=\"mapaddress\">123 Main St, City</div>\n+      <section id=\"postingbody\">Great condition Trek bike for sale.</section>\n+      <div id=\"thumbs\">\n+        <a class=\"thumb\" href=\"#\"><img src=\"https://images.craigslist.org/00101_abc123_50x50c.jpg\"></a>\n+        <a class=\"thumb\" href=\"#\"><img src=\"https://images.craigslist.org/00202_def456_50x50c.jpg\"></a>\n+      </div>\n+      <div class=\"attrgroup\">\n+        <span>make / manufacturer: Trek</span>\n+        <span>model name / number: FX</span>\n+        <span>bicycle type: hybrid</span>\n+      </div>\n+    `;\n+  });\n+\n+  test('extractCraigslistData extracts correct information', () => {\n+    // You'll need to expose the function for testing or mock chrome.runtime\n+    // This is a simplified representation\n+    const mockExtractFunction = extractCraigslistData; // You'll need to handle this\n+    const data = mockExtractFunction();\n+    \n+    expect(data.title).toBe('2018 Trek Bike');\n+    expect(data.price).toBe('$500');\n+    expect(data.location).toBe('123 Main St, City');\n+    expect(data.attributes['make / manufacturer']).toBe('Trek');\n+    expect(data.images.length).toBe(2);\n+  });\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740771750816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,41 +17,41 @@\n   it('should display the correct title', async () => {\n     const title = await page.title();\n     expect(title).toBe('Craigslist to JSON');\n   });\n-});\n \n-import { someFunction } from '../web_extension/chrome/popup';\n-\n-test('hello world!', () => {\n-\texpect(someFunction()).toBe('expected value');\n-});\n-\n-describe('Content Script', () => {\n-  beforeEach(() => {\n-    // Mock DOM elements for testing\n-    document.body.innerHTML = `\n-      <div id=\"titletextonly\">2018 Trek Bike</div>\n-      <span class=\"price\">$500</span>\n-      <time class=\"date timeago\">2023-06-15</time>\n-      <div class=\"mapaddress\">123 Main St, City</div>\n-      <section id=\"postingbody\">Great condition Trek bike for sale.</section>\n-      <div id=\"thumbs\">\n-        <a class=\"thumb\" href=\"#\"><img src=\"https://images.craigslist.org/00101_abc123_50x50c.jpg\"></a>\n-        <a class=\"thumb\" href=\"#\"><img src=\"https://images.craigslist.org/00202_def456_50x50c.jpg\"></a>\n-      </div>\n-      <div class=\"attrgroup\">\n-        <span>make / manufacturer: Trek</span>\n-        <span>model name / number: FX</span>\n-        <span>bicycle type: hybrid</span>\n-      </div>\n-    `;\n+  it('should have disabled convert button when not on Craigslist', async () => {\n+    // Mock chrome API\n+    global.chrome = {\n+      tabs: {\n+        query: (params, callback) => {\n+          callback([{ url: 'https://example.com' }]);\n+        }\n+      }\n+    };\n+    \n+    await page.evaluate(() => {\n+      document.dispatchEvent(new Event('DOMContentLoaded'));\n+    });\n+    \n+    const isDisabled = await page.$eval('#convert-button', button => button.disabled);\n+    expect(isDisabled).toBe(true);\n   });\n \n-  test('extractCraigslistData extracts correct information', () => {\n-    // You'll need to expose the function for testing or mock chrome.runtime\n-    // This is a simplified representation\n-    const mockExtractFunction = extractCraigslistData; // You'll need to handle this\n+  it('should show the JSON container after successful conversion', async () => {\n+    // Setup\n+    await page.evaluate(() => {\n+      const jsonContainer = document.querySelector('.json-container');\n+      jsonContainer.style.display = 'none';\n+      \n+      // Mock successful response\n+      chrome.tabs = {\n+        query: (params, callback) => {\n+          callback([{ id: 1, url: 'https://craigslist.org/post' }]);\n+        },\n+        sendMessage: (tabId, message, callback) => {\n+          callback({\n+            success: true,\n     const data = mockExtractFunction();\n     \n     expect(data.title).toBe('2018 Trek Bike');\n     expect(data.price).toBe('$500');\n"
                },
                {
                    "date": 1740771779671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,56 @@\n   it('should display the correct title', async () => {\n     const title = await page.title();\n     expect(title).toBe('Craigslist to JSON');\n   });\n+\n+  it('should have disabled convert button when not on Craigslist', async () => {\n+    // Mock chrome API\n+    global.chrome = {\n+      tabs: {\n+        query: (params, callback) => {\n+          callback([{ url: 'https://example.com' }]);\n+        }\n+      }\n+    };\n+    \n+    await page.evaluate(() => {\n+      document.dispatchEvent(new Event('DOMContentLoaded'));\n+    });\n+    \n+    const isDisabled = await page.$eval('#convert-button', button => button.disabled);\n+    expect(isDisabled).toBe(true);\n+  });\n+\n+  it('should show the JSON container after successful conversion', async () => {\n+    // Setup\n+    await page.evaluate(() => {\n+      const jsonContainer = document.querySelector('.json-container');\n+      jsonContainer.style.display = 'none';\n+      \n+      // Mock successful response\n+      chrome.tabs = {\n+        query: (params, callback) => {\n+          callback([{ id: 1, url: 'https://craigslist.org/post' }]);\n+        },\n+        sendMessage: (tabId, message, callback) => {\n+          callback({\n+            success: true,\n+            data: { title: 'Test Bike', price: '$100' }\n+          });\n+        }\n+      };\n+      \n+      document.dispatchEvent(new Event('DOMContentLoaded'));\n+    });\n+    \n+    // Trigger conversion\n+    await page.click('#convert-button');\n+    \n+    // Check if JSON container is displayed\n+    const displayStyle = await page.$eval('.json-container', container => container.style.display);\n+    expect(displayStyle).toBe('flex');\n+  });\n });\n \n import { someFunction } from '../web_extension/chrome/popup';\n \n"
                },
                {
                    "date": 1740774097683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+const puppeteer = require('puppeteer');\n+\n+describe('Popup Page', () => {\n+  let browser;\n+  let page;\n+\n+  beforeAll(async () => {\n+    browser = await puppeteer.launch();\n+    page = await browser.newPage();\n+    await page.goto(`file://${__dirname}/../web_extension/chrome/popup.html`);\n+  });\n+\n+  afterAll(async () => {\n+    await browser.close();\n+  });\n+\n+  it('should display the correct title', async () => {\n+    const title = await page.title();\n+    expect(title).toBe('Craigslist to JSON');\n+  });\n+\n+  it('should have disabled convert button when not on Craigslist', async () => {\n+    // Mock chrome API\n+    global.chrome = {\n+      tabs: {\n+        query: (params, callback) => {\n+          callback([{ url: 'https://example.com' }]);\n+        }\n+      }\n+    };\n+    \n+    await page.evaluate(() => {\n+      document.dispatchEvent(new Event('DOMContentLoaded'));\n+    });\n+    \n+    const isDisabled = await page.$eval('#convert-button', button => button.disabled);\n+    expect(isDisabled).toBe(true);\n+  });\n+\n+  it('should show the JSON container after successful conversion', async () => {\n+    // Setup\n+    await page.evaluate(() => {\n+      const jsonContainer = document.querySelector('.json-container');\n+      jsonContainer.style.display = 'none';\n+      \n+      // Mock successful response\n+      chrome.tabs = {\n+        query: (params, callback) => {\n+          callback([{ id: 1, url: 'https://craigslist.org/post' }]);\n+        },\n+        sendMessage: (tabId, message, callback) => {\n+          callback({\n+            success: true,\n+            data: { title: 'Test Bike', price: '$100' }\n+          });\n+        }\n+      };\n+      \n+      document.dispatchEvent(new Event('DOMContentLoaded'));\n+    });\n+    \n+    // Trigger conversion\n+    await page.click('#convert-button');\n+    \n+    // Check if JSON container is displayed\n+    const displayStyle = await page.$eval('.json-container', container => container.style.display);\n+    expect(displayStyle).toBe('flex');\n+  });\n+});\n+\n+import '../web_extension/chrome/popup.js';\n+import { someFunction } from '../web_extension/chrome/popup.js';\n+\n+describe('Popup.js Unit Tests', () => {\n+  beforeEach(() => {\n+    // Set up document body\n+    document.body.innerHTML = `\n+      <div class=\"container\">\n+        <h1>Craigslist to JSON</h1>\n+        <div id=\"status-message\">Navigate to a Craigslist post to convert it</div>\n+        <button id=\"convert-button\">Convert to JSON</button>\n+        <div class=\"json-container\" style=\"display: none;\">\n+      <time class=\"date timeago\">2023-06-15</time>\n+      <div class=\"mapaddress\">123 Main St, City</div>\n+      <section id=\"postingbody\">Great condition Trek bike for sale.</section>\n+      <div id=\"thumbs\">\n+        <a class=\"thumb\" href=\"#\"><img src=\"https://images.craigslist.org/00101_abc123_50x50c.jpg\"></a>\n+        <a class=\"thumb\" href=\"#\"><img src=\"https://images.craigslist.org/00202_def456_50x50c.jpg\"></a>\n+      </div>\n+      <div class=\"attrgroup\">\n+        <span>make / manufacturer: Trek</span>\n+        <span>model name / number: FX</span>\n+        <span>bicycle type: hybrid</span>\n+      </div>\n+    `;\n+  });\n+\n+  test('extractCraigslistData extracts correct information', () => {\n+    // You'll need to expose the function for testing or mock chrome.runtime\n+    // This is a simplified representation\n+    const mockExtractFunction = extractCraigslistData; // You'll need to handle this\n+    const data = mockExtractFunction();\n+    \n+    expect(data.title).toBe('2018 Trek Bike');\n+    expect(data.price).toBe('$500');\n+    expect(data.location).toBe('123 Main St, City');\n+    expect(data.attributes['make / manufacturer']).toBe('Trek');\n+    expect(data.images.length).toBe(2);\n+  });\n+});\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740694325217,
            "name": "Commit-0",
            "content": "const puppeteer = require('puppeteer');\n\ndescribe('Popup Page', () => {\n  let browser;\n  let page;\n\n  beforeAll(async () => {\n    browser = await puppeteer.launch();\n    page = await browser.newPage();\n    await page.goto(`file://${__dirname}/../web_extension/chrome/popup.html`);\n  });\n\n  afterAll(async () => {\n    await browser.close();\n  });\n\n  it('should display the correct title', async () => {\n    const title = await page.title();\n    expect(title).toBe('Craigslist to JSON');\n  });\n});\n\nimport { someFunction } from '../web_extension/chrome/popup';\n\ntest('hello world!', () => {"
        }
    ]
}