# Auto-generated by cleanup.py
import os
import csv
from collections import defaultdict

class BikeDatabase:
    def __init__(self, data_dir=None):
        if data_dir is None:
            # Use the directory one level up from this file's location
            data_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            
        self.data_dir = data_dir
        self.makes = set()
        self.models = defaultdict(set)
        self.years = set()
        self.bikes = []
        
        self.load_data()
    
    def load_data(self):
        """Load bike data from CSV files"""
        # Load motorcycle data
        moto_file = os.path.join(self.data_dir, "transformed", "Motorcycle_Transformed_Data.csv")
        if os.path.exists(moto_file):
            self._load_from_csv(moto_file, 'motorcycle')
            
        # Load bicycle data
        bike_file = os.path.join(self.data_dir, "transformed", "Bicycle_Transformed_Data.csv")
        if os.path.exists(bike_file):
            self._load_from_csv(bike_file, 'bicycle')
    
    def _load_from_csv(self, file_path, vehicle_type):
        """Load data from a specific CSV file"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    year = row.get('Year', '')
                    make = row.get('Make', '')
                    model = row.get('Model', '')
                    package = row.get('Package', '')
                    
                    if not (year and make and model):
                        continue
                        
                    # Create a standardized bike record
                    bike_record = {
                        'year': year,
                        'make': make,
                        'model': model,
                        'package': package,
                        'type': vehicle_type
                    }
                    
                    # Add extra fields depending on vehicle type
                    if vehicle_type == 'motorcycle':
                        bike_record['category'] = row.get('Category', '')
                        bike_record['engine'] = row.get('Engine', '')
                    else:  # bicycle
                        bike_record['category'] = row.get('Category', '')
                        bike_record['frame'] = row.get('Frame', '')
                    
                    # Update tracking collections
                    self.makes.add(make)
                    self.models[make].add(model)
                    self.years.add(year)
                    self.bikes.append(bike_record)
        except Exception as e:
            print(f"Error loading {file_path}: {str(e)}")
    
    def find_by_make(self, make):
        """Find bikes by make"""
        return [bike for bike in self.bikes if bike['make'].lower() == make.lower()]
    
    def find_by_model(self, model):
        """Find bikes by model"""
        return [bike for bike in self.bikes if model.lower() in bike['model'].lower()]
    
    def fuzzy_search_make(self, query):
        """Search for makes with fuzzy matching"""
        query = query.lower()
        return [make for make in self.makes if query in make.lower()]
    
    def search(self, query):
        """General search function"""
        query = query.lower()
        results = []
        
        # Search by make
        for bike in self.bikes:
            if query in bike['make'].lower():
                results.append(bike)
                continue
                
            # Search by model
            if query in bike['model'].lower():
                results.append(bike)
                continue
                
            # Search by year
            if query == bike['year']:
                results.append(bike)
                continue
                
            # Search by package
            if bike['package'] and query in bike['package'].lower():
                results.append(bike)
                
        return results
    
    def get_models_for_make(self, make):
        """Get all models for a given make"""
        return sorted(list(self.models.get(make, [])))
    
    def get_years_for_make_model(self, make, model):
        """Get all years for a given make and model"""
        years = set()
        for bike in self.bikes:
            if bike['make'] == make and bike['model'] == model:
                years.add(bike['year'])
        return sorted(list(years))
    
    def get_role_name(self, bike):
        """Generate a role name for a bike"""
        if bike['package']:
            return f"{bike['year']} {bike['make']} {bike['model']} {bike['package']}"
        return f"{bike['year']} {bike['make']} {bike['model']}"
