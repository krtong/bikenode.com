---
layout: dashboard.njk
title: Add New Bike
subtitle: Select your bike like a pro racer
showContentHeader: false
breadcrumb:
  - title: Virtual Garage
    url: /virtual-garage-dashboard/
  - title: Add New Bike
---

<div class="vehicle-selection-container">
    <!-- Left Menu Panel -->
    <div class="menu-panel">
        <div class="menu-header">
            <button class="back-button" id="back-button" onclick="goBack()">‚Üê Back</button>
            <div class="menu-title" id="menu-title">Vehicle Selection</div>
            <div class="menu-subtitle" id="menu-subtitle">Choose your vehicle type to get started</div>
        </div>
        <div class="menu-content" id="menu-content">
            <!-- Content will be populated here -->
        </div>
    </div>

    <!-- Right Display Panel -->
    <div class="display-panel">
        <div class="breadcrumb" id="breadcrumb">
            <span class="breadcrumb-item">Add Bike</span>
        </div>

        <div class="vehicle-display">
            <div class="vehicle-icon" id="vehicle-icon">üöó</div>
            <div class="vehicle-name" id="vehicle-name">Select Vehicle</div>
            <div class="vehicle-description" id="vehicle-description">Choose a vehicle type from the menu to begin your selection</div>
        </div>

        <!-- Specs Panel -->
        <div class="specs-panel" id="specs-panel">
            <div class="specs-header">
                <div class="specs-title" id="specs-title">Vehicle Specifications</div>
                <button class="close-button" onclick="closeSpecs()">‚úï Close</button>
            </div>
            
            <div class="specs-content">
                <div class="spec-grid" id="spec-grid">
                    <!-- Specs will be populated here -->
                </div>

                <div class="action-grid">
                    <button class="action-button primary" onclick="addToGarage()">Add to Garage</button>
                    <button class="action-button" onclick="findComparisons()">Compare</button>
                    <button class="action-button" onclick="viewReviews()">Reviews</button>
                    <button class="action-button" onclick="viewGallery()">Gallery</button>
                    <button class="action-button" onclick="customize()">Customize</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.vehicle-selection-container {
    display: flex;
    height: calc(100vh - 120px);
    margin: -32px;
    background: #0a0a0a;
}

/* Left Menu Panel */
.menu-panel {
    width: 400px;
    background: #111111;
    border-right: 1px solid #333333;
    display: flex;
    flex-direction: column;
}

.menu-header {
    padding: 30px;
    border-bottom: 1px solid #333333;
}

.back-button {
    background: none;
    border: none;
    color: #666666;
    font-size: 14px;
    cursor: pointer;
    margin-bottom: 20px;
    padding: 8px 0;
    transition: color 0.2s ease;
    display: none;
}

.back-button:hover {
    color: #ffffff;
}

.menu-title {
    font-size: 24px;
    font-weight: 600;
    color: #ffffff;
    margin-bottom: 8px;
}

.menu-subtitle {
    font-size: 14px;
    color: #666666;
    line-height: 1.5;
}

.menu-content {
    flex: 1;
    padding: 0;
    overflow-y: auto;
}

.search-container {
    padding: 15px 30px;
    border-bottom: 1px solid #333333;
    background: #0a0a0a;
    position: sticky;
    top: 0;
    z-index: 20;
}

.search-input {
    width: 100%;
    padding: 12px 16px;
    background: #1a1a1a;
    border: 1px solid #333333;
    border-radius: 8px;
    color: #ffffff;
    font-size: 14px;
    transition: all 0.2s ease;
}

.search-input:focus {
    outline: none;
    border-color: #555555;
    background: #222222;
}

.search-input::placeholder {
    color: #666666;
}

.letter-separator {
    padding: 10px 30px;
    background: #1a1a1a;
    border-bottom: 1px solid #333333;
    font-size: 12px;
    font-weight: 600;
    color: #888888;
    text-transform: uppercase;
    letter-spacing: 1px;
    position: sticky;
    top: 62px; /* Height of search container */
    z-index: 10;
}

.menu-option {
    padding: 20px 30px;
    border-bottom: 1px solid #1a1a1a;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 15px;
}

.menu-option:hover {
    background: #1a1a1a;
}

.option-icon {
    font-size: 24px;
    width: 40px;
    text-align: center;
}

.option-content {
    flex: 1;
}

.option-title {
    font-size: 16px;
    font-weight: 500;
    color: #ffffff;
    margin-bottom: 4px;
}

.option-description {
    font-size: 13px;
    color: #666666;
    line-height: 1.4;
}

.option-arrow {
    color: #333333;
    font-size: 14px;
    transition: color 0.2s ease;
}

.menu-option:hover .option-arrow {
    color: #666666;
}

/* Right Display Panel */
.display-panel {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: #0a0a0a;
    position: relative;
}

.vehicle-display {
    text-align: center;
    transition: all 0.3s ease;
}

.vehicle-icon {
    font-size: 120px;
    margin-bottom: 30px;
    transition: all 0.3s ease;
    filter: grayscale(1) opacity(0.3);
}

.vehicle-icon.active {
    filter: grayscale(0) opacity(1);
    transform: scale(1.1);
}

.vehicle-name {
    font-size: 32px;
    font-weight: 300;
    color: #ffffff;
    margin-bottom: 12px;
    transition: all 0.3s ease;
}

.vehicle-description {
    font-size: 16px;
    color: #666666;
    max-width: 400px;
    line-height: 1.5;
    transition: all 0.3s ease;
}

/* Specs Panel */
.specs-panel {
    position: absolute;
    top: 0;
    right: -100%;
    width: 100%;
    height: 100%;
    background: #111111;
    transition: right 0.4s ease;
    overflow-y: auto;
}

.specs-panel.active {
    right: 0;
}

.specs-header {
    padding: 30px;
    border-bottom: 1px solid #333333;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.specs-title {
    font-size: 24px;
    font-weight: 600;
    color: #ffffff;
}

.close-button {
    background: none;
    border: none;
    color: #666666;
    font-size: 14px;
    cursor: pointer;
    padding: 8px;
    transition: color 0.2s ease;
}

.close-button:hover {
    color: #ffffff;
}

.specs-content {
    padding: 30px;
}

.spec-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 40px;
}

.spec-item {
    background: #1a1a1a;
    border-radius: 8px;
    padding: 20px;
    border: 1px solid #333333;
}

.spec-label {
    font-size: 12px;
    color: #666666;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 8px;
}

.spec-value {
    font-size: 18px;
    color: #ffffff;
    font-weight: 500;
}

.action-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 15px;
}

.action-button {
    background: #1a1a1a;
    border: 1px solid #333333;
    color: #ffffff;
    padding: 15px 20px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.2s ease;
    text-align: center;
}

.action-button:hover {
    background: #333333;
    border-color: #555555;
}

.action-button.primary {
    background: var(--accent);
    color: #ffffff;
    border-color: var(--accent);
}

.action-button.primary:hover {
    background: rgba(88, 101, 242, 0.8);
}

/* Breadcrumb */
.breadcrumb {
    position: absolute;
    top: 30px;
    left: 30px;
    font-size: 14px;
    color: #666666;
}

.breadcrumb-item {
    display: inline;
    cursor: pointer;
    transition: color 0.2s ease;
    color: #666666;
}

.breadcrumb-item:hover {
    color: #ffffff;
}

.breadcrumb-item:last-child {
    color: #ffffff;
    cursor: default;
}

.breadcrumb-item:last-child:hover {
    color: #ffffff;
}

.breadcrumb-item:not(:last-child)::after {
    content: " / ";
    margin: 0 8px;
    color: #444444;
}

/* Responsive */
@media (max-width: 768px) {
    .vehicle-selection-container {
        flex-direction: column;
    }
    
    .menu-panel {
        width: 100%;
        height: 50vh;
        border-right: none;
        border-bottom: 1px solid #333333;
    }
    
    .display-panel {
        height: 50vh;
    }
    
    .vehicle-icon {
        font-size: 80px;
    }
    
    .vehicle-name {
        font-size: 24px;
    }
}
</style>

<script>
// Real data structures
let bikeData = {
    categories: [
        { 
            id: 'bicycle', 
            icon: 'üö¥', 
            title: 'Bicycle', 
            description: 'Traditional and electric bicycles',
            preview: { icon: 'üö¥', name: 'Bicycle', desc: 'Eco-friendly transportation and recreation' }
        },
        { 
            id: 'motorcycle', 
            icon: 'üèçÔ∏è', 
            title: 'Motorcycle', 
            description: 'Motorcycles and scooters',
            preview: { icon: 'üèçÔ∏è', name: 'Motorcycle', desc: 'High-performance road machines' }
        }
    ],
    brands: {
        bicycle: [],
        motorcycle: []
    },
    years: [],
    models: {}
};

let navigationStack = [];
let currentView = 'categories';
let selectedVehicle = {};
let currentBreadcrumb = ['Add Bike'];

// Load real data from API
async function loadVehicleData() {
    try {
        console.log('Loading vehicle data from API...');
        
        // Load motorcycle brands
        const motorcycleResp = await fetch('http://localhost:8080/api/motorcycles/makes');
        const motorcycleData = await motorcycleResp.json();
        bikeData.brands.motorcycle = (motorcycleData || []).map(brand => ({
            id: brand.toLowerCase().replace(/[^a-z0-9]/g, ''),
            title: brand,
            description: `${brand} motorcycles`,
            preview: { icon: 'üèçÔ∏è', name: brand, desc: `Explore ${brand} motorcycles` }
        }));
        
        console.log(`Loaded ${bikeData.brands.motorcycle.length} motorcycle brands`);
        
        // Load bicycle brands
        const bicycleResp = await fetch('http://localhost:8080/api/bicycles/manufacturers');
        const bicycleData = await bicycleResp.json();
        bikeData.brands.bicycle = (bicycleData.manufacturers || []).map(brand => ({
            id: brand.toLowerCase().replace(/[^a-z0-9]/g, ''),
            title: brand,
            description: `${brand} bicycles`,
            preview: { icon: 'üö¥', name: brand, desc: `Explore ${brand} bicycles` }
        }));
        
        console.log(`Loaded ${bikeData.brands.bicycle.length} bicycle brands`);
        
    } catch (error) {
        console.error('Error loading vehicle data:', error);
        alert('Error loading vehicle data. Please check the console for details.');
    }
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', async function() {
    await loadVehicleData();
    showCategories();
});

function showCategories() {
    currentView = 'categories';
    updateHeader('Vehicle Selection', 'Choose your vehicle category to get started');
    updateBreadcrumb(['Add Bike']);
    hideBackButton();
    
    const content = document.getElementById('menu-content');
    content.innerHTML = '';
    
    bikeData.categories.forEach(category => {
        const option = createMenuOption(category, () => showBrands(category.id));
        content.appendChild(option);
    });
    
    updateDisplay('üöó', 'Select Category', 'Choose a vehicle category from the menu to begin your selection');
}

function renderItemsWithCategoryGrouping(items, onItemClick, searchPlaceholder = 'Search...') {
    const content = document.getElementById('menu-content');
    content.innerHTML = '';
    
    // Add search bar
    const searchContainer = document.createElement('div');
    searchContainer.className = 'search-container';
    searchContainer.innerHTML = `
        <input type="text" class="search-input" placeholder="${searchPlaceholder}" id="menu-search-input">
    `;
    content.appendChild(searchContainer);
    
    // Container for filtered items
    const itemsContainer = document.createElement('div');
    itemsContainer.id = 'filtered-items-container';
    content.appendChild(itemsContainer);
    
    // Function to render filtered items grouped by category
    function renderFilteredItems(searchTerm = '') {
        itemsContainer.innerHTML = '';
        
        // Filter items based on search
        let filteredItems = items;
        if (searchTerm) {
            filteredItems = items.filter(item => 
                item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                (item.category && item.category.toLowerCase().includes(searchTerm.toLowerCase()))
            );
        }
        
        if (filteredItems.length === 0) {
            itemsContainer.innerHTML = '<div class="menu-option" style="opacity: 0.5; cursor: default;">No results found</div>';
            return;
        }
        
        // Group items by category
        const grouped = {};
        filteredItems.forEach(item => {
            const category = item.category || 'Unspecified category';
            if (!grouped[category]) {
                grouped[category] = [];
            }
            grouped[category].push(item);
        });
        
        // Sort categories and render them
        const sortedCategories = Object.keys(grouped).sort();
        
        sortedCategories.forEach(category => {
            // Add category separator
            const separator = document.createElement('div');
            separator.className = 'letter-separator';
            separator.textContent = category;
            itemsContainer.appendChild(separator);
            
            // Sort models within category alphabetically
            const sortedModels = grouped[category].sort((a, b) => a.title.localeCompare(b.title));
            
            // Add items for this category
            sortedModels.forEach(item => {
                const option = createMenuOption(item, () => onItemClick(item));
                itemsContainer.appendChild(option);
            });
        });
    }
    
    // Initial render
    renderFilteredItems();
    
    // Add search functionality
    const searchInput = document.getElementById('menu-search-input');
    searchInput.addEventListener('input', (e) => {
        renderFilteredItems(e.target.value);
    });
    
    // Focus search input
    setTimeout(() => searchInput.focus(), 100);
}

function renderItemsWithSearch(items, onItemClick, searchPlaceholder = 'Search...', showLetters = false) {
    const content = document.getElementById('menu-content');
    content.innerHTML = '';
    
    // Add search bar
    const searchContainer = document.createElement('div');
    searchContainer.className = 'search-container';
    searchContainer.innerHTML = `
        <input type="text" class="search-input" placeholder="${searchPlaceholder}" id="menu-search-input">
    `;
    content.appendChild(searchContainer);
    
    // Container for filtered items
    const itemsContainer = document.createElement('div');
    itemsContainer.id = 'filtered-items-container';
    content.appendChild(itemsContainer);
    
    // Function to render filtered items
    function renderFilteredItems(searchTerm = '') {
        itemsContainer.innerHTML = '';
        
        // Filter items based on search
        let filteredItems = items;
        if (searchTerm) {
            filteredItems = items.filter(item => 
                item.title.toLowerCase().includes(searchTerm.toLowerCase())
            );
        }
        
        if (filteredItems.length === 0) {
            itemsContainer.innerHTML = '<div class="menu-option" style="opacity: 0.5; cursor: default;">No results found</div>';
            return;
        }
        
        // Group items by first letter if showLetters is true
        if (showLetters) {
            const grouped = {};
            filteredItems.forEach(item => {
                const firstLetter = item.title[0].toUpperCase();
                if (!grouped[firstLetter]) {
                    grouped[firstLetter] = [];
                }
                grouped[firstLetter].push(item);
            });
            
            // Render grouped items
            Object.keys(grouped).sort().forEach(letter => {
                // Add letter separator
                const separator = document.createElement('div');
                separator.className = 'letter-separator';
                separator.textContent = letter;
                itemsContainer.appendChild(separator);
                
                // Add items for this letter
                grouped[letter].forEach(item => {
                    const option = createMenuOption(item, () => onItemClick(item));
                    itemsContainer.appendChild(option);
                });
            });
        } else {
            // Render items without grouping
            filteredItems.forEach(item => {
                const option = createMenuOption(item, () => onItemClick(item));
                itemsContainer.appendChild(option);
            });
        }
    }
    
    // Initial render
    renderFilteredItems();
    
    // Add search functionality
    const searchInput = document.getElementById('menu-search-input');
    searchInput.addEventListener('input', (e) => {
        renderFilteredItems(e.target.value);
    });
    
    // Focus search input
    setTimeout(() => searchInput.focus(), 100);
}

function showBrands(categoryId) {
    navigationStack.push({ view: 'categories' });
    currentView = 'brands';
    selectedVehicle.category = categoryId;
    
    const categoryData = bikeData.categories.find(c => c.id === categoryId);
    updateHeader('Select Brand', `Choose a ${categoryData.title.toLowerCase()} manufacturer`);
    updateBreadcrumb(['Add Bike', categoryData.title]);
    showBackButton();
    
    const brands = bikeData.brands[categoryId] || [];
    
    if (brands.length === 0) {
        document.getElementById('menu-content').innerHTML = '<div class="menu-option" style="opacity: 0.5; cursor: default;">No brands available</div>';
        return;
    }
    
    renderItemsWithSearch(
        brands,
        (brand) => showYears(categoryId, brand.title),
        `Search ${categoryData.title.toLowerCase()} brands...`,
        true // Show alphabetical separators
    );
}

async function showYears(categoryId, brandName) {
    navigationStack.push({ view: 'brands', categoryId });
    currentView = 'years';
    selectedVehicle.brand = brandName;
    
    const categoryData = bikeData.categories.find(c => c.id === categoryId);
    updateHeader('Select Year', `Choose the model year for ${brandName}`);
    updateBreadcrumb(['Add Bike', categoryData.title, brandName]);
    showBackButton();
    
    try {
        // Load years for this brand
        let years = [];
        if (categoryId === 'bicycle') {
            const resp = await fetch(`http://localhost:8080/api/bicycles/years/${brandName}`);
            const data = await resp.json();
            years = data.years || [];
        } else {
            // For motorcycles, load years for this specific make
            const resp = await fetch(`http://localhost:8080/api/motorcycles/years/${encodeURIComponent(brandName)}`);
            const data = await resp.json();
            years = data || [];
        }
        
        if (years.length === 0) {
            document.getElementById('menu-content').innerHTML = '<div class="menu-option" style="opacity: 0.5; cursor: default;">No years available</div>';
            return;
        }
        
        // Convert years to menu items
        const yearItems = years.map(year => ({
            id: year.toString(),
            title: year.toString(),
            description: '',
            preview: { icon: 'üìÖ', name: `${year} Models`, desc: `View ${year} ${brandName} models` }
        }));
        
        renderItemsWithSearch(
            yearItems,
            (yearItem) => showModels(categoryId, brandName, parseInt(yearItem.title)),
            'Search years...',
            false // No alphabetical separators for years
        );
        
    } catch (error) {
        console.error('Error loading years:', error);
        document.getElementById('menu-content').innerHTML = '<div class="menu-option" style="opacity: 0.5; cursor: default;">Error loading years</div>';
    }
}

async function showModels(categoryId, brandName, year) {
    navigationStack.push({ view: 'years', categoryId, brandName });
    currentView = 'models';
    selectedVehicle.year = year;
    
    const categoryData = bikeData.categories.find(c => c.id === categoryId);
    updateHeader('Select Model', `${year} ${brandName} models`);
    updateBreadcrumb(['Add Bike', categoryData.title, brandName, year.toString()]);
    showBackButton();
    
    try {
        let models = [];
        if (categoryId === 'bicycle') {
            const resp = await fetch(`http://localhost:8080/api/bicycles/models/${brandName}/${year}`);
            const data = await resp.json();
            models = data.models || [];
        } else {
            // For motorcycles, store the full data and extract unique models
            console.log(`Fetching motorcycle models for ${brandName} ${year}...`);
            
            const resp = await fetch(`http://localhost:8080/api/motorcycles/models/${encodeURIComponent(brandName)}/${year}`);
            const motorcycleData = await resp.json();
            console.log(`API returned ${motorcycleData?.length || 0} motorcycle records`);
            
            // Store full data for later use
            selectedVehicle.fullModelData = motorcycleData;
            
            // Extract unique model names (without package)
            const modelMap = new Map();
            
            if (Array.isArray(motorcycleData)) {
                motorcycleData.forEach(m => {
                    if (!modelMap.has(m.model)) {
                        modelMap.set(m.model, []);
                    }
                    modelMap.get(m.model).push(m);
                });
            }
            
            models = Array.from(modelMap.keys()).sort();
            console.log(`Found ${models.length} unique models for ${brandName} ${year}`);
        }
        
        if (models.length === 0) {
            document.getElementById('menu-content').innerHTML = '<div class="menu-option" style="opacity: 0.5; cursor: default;">No models available</div>';
            return;
        }
        
        console.log(`Displaying ${models.length} models`);
        if (models.length > 0) {
            console.log('Sample models:', models.slice(0, 5));
        }
        
        // Convert models to menu items with category/engine info
        const modelItems = models.map(model => {
            // Get category and engine info for this model
            let modelInfo = { category: '', engine: '' };
            if (categoryId === 'motorcycle' && selectedVehicle.fullModelData) {
                const modelData = selectedVehicle.fullModelData.find(m => m.model === model);
                if (modelData) {
                    modelInfo.category = modelData.category || '';
                    modelInfo.engine = modelData.engine || '';
                }
            }
            
            const description = modelInfo.category && modelInfo.engine 
                ? `${modelInfo.category} - ${modelInfo.engine}`
                : modelInfo.category || modelInfo.engine || 'Details available';
                
            return {
                id: model.toLowerCase().replace(/[^a-z0-9]/g, ''),
                title: model,
                description: description,
                category: modelInfo.category,
                preview: { icon: categoryId === 'bicycle' ? 'üö¥' : 'üèçÔ∏è', name: model, desc: `View variants` }
            };
        });
        
        if (categoryId === 'motorcycle') {
            // For motorcycles, render with category grouping
            renderItemsWithCategoryGrouping(
                modelItems,
                (modelItem) => showVariants(categoryId, brandName, year, modelItem.title),
                `Search ${brandName} models...`
            );
        } else {
            // For bicycles, use the regular alphabetical rendering
            renderItemsWithSearch(
                modelItems,
                (modelItem) => showVariants(categoryId, brandName, year, modelItem.title),
                `Search ${brandName} models...`,
                true // Show alphabetical separators for models
            );
        }
        
    } catch (error) {
        console.error('Error loading models:', error);
        document.getElementById('menu-content').innerHTML = '<div class="menu-option" style="opacity: 0.5; cursor: default;">Error loading models</div>';
    }
}

function createMenuOption(item, onClick) {
    const option = document.createElement('div');
    option.className = 'menu-option';
    option.innerHTML = `
        <div class="option-icon">${item.icon || ''}</div>
        <div class="option-content">
            <div class="option-title">${item.title}</div>
            <div class="option-description">${item.description}</div>
        </div>
        <div class="option-arrow">‚Üí</div>
    `;
    
    option.addEventListener('mouseenter', () => {
        if (item.preview) {
            updateDisplay(item.preview.icon, item.preview.name, item.preview.desc, true);
        }
    });
    
    option.addEventListener('mouseleave', () => {
        resetDisplay();
    });
    
    option.addEventListener('click', onClick);
    
    return option;
}

function updateDisplay(icon, name, description, active = false) {
    document.getElementById('vehicle-icon').textContent = icon;
    document.getElementById('vehicle-name').textContent = name;
    document.getElementById('vehicle-description').textContent = description;
    
    const iconEl = document.getElementById('vehicle-icon');
    if (active) {
        iconEl.classList.add('active');
    } else {
        iconEl.classList.remove('active');
    }
}

function resetDisplay() {
    if (currentView === 'categories') {
        updateDisplay('üöó', 'Select Category', 'Choose a vehicle category from the menu to begin your selection');
    }
}

function updateHeader(title, subtitle) {
    document.getElementById('menu-title').textContent = title;
    document.getElementById('menu-subtitle').textContent = subtitle;
}

function updateBreadcrumb(items) {
    currentBreadcrumb = items;
    const breadcrumb = document.getElementById('breadcrumb');
    breadcrumb.innerHTML = items.map((item, index) => 
        `<span class="breadcrumb-item" data-index="${index}" onclick="breadcrumbClick(${index})">${item}</span>`
    ).join('');
}

function breadcrumbClick(index) {
    // Don't navigate if clicking the last item (current page)
    if (index === currentBreadcrumb.length - 1) return;
    
    // Navigate based on breadcrumb index
    if (index === 0) {
        // "Add Bike" - go to categories
        showCategories();
    } else if (index === 1) {
        // Category - go to brands
        const category = bikeData.categories.find(c => c.title === currentBreadcrumb[1]);
        if (category) showBrands(category.id);
    } else if (index === 2) {
        // Brand - go to years
        const category = bikeData.categories.find(c => c.title === currentBreadcrumb[1]);
        if (category) showYears(category.id, currentBreadcrumb[2]);
    } else if (index === 3) {
        // Year - go to models
        const category = bikeData.categories.find(c => c.title === currentBreadcrumb[1]);
        if (category) showModels(category.id, currentBreadcrumb[2], parseInt(currentBreadcrumb[3]));
    } else if (index === 4) {
        // Model - go to variants
        const category = bikeData.categories.find(c => c.title === currentBreadcrumb[1]);
        if (category) showVariants(category.id, currentBreadcrumb[2], parseInt(currentBreadcrumb[3]), currentBreadcrumb[4]);
    }
}

function showBackButton() {
    document.getElementById('back-button').style.display = 'block';
}

function hideBackButton() {
    document.getElementById('back-button').style.display = 'none';
}

function goBack() {
    if (navigationStack.length === 0) return;
    
    const previous = navigationStack.pop();
    
    if (previous.view === 'categories') {
        showCategories();
    } else if (previous.view === 'brands') {
        showBrands(previous.categoryId);
    } else if (previous.view === 'years') {
        showYears(previous.categoryId, previous.brandName);
    } else if (previous.view === 'models') {
        showModels(previous.categoryId, previous.brandName, previous.year);
    } else if (previous.view === 'variants') {
        showVariants(previous.categoryId, previous.brandName, previous.year, previous.model);
    }
}

async function showVariants(categoryId, brandName, year, model) {
    navigationStack.push({ view: 'models', categoryId, brandName, year });
    currentView = 'variants';
    selectedVehicle.model = model;
    
    const categoryData = bikeData.categories.find(c => c.id === categoryId);
    updateHeader('Select Variant', `${year} ${brandName} ${model} variants`);
    updateBreadcrumb(['Add Bike', categoryData.title, brandName, year.toString(), model]);
    showBackButton();
    
    if (categoryId === 'motorcycle' && selectedVehicle.fullModelData) {
        // Filter variants for this specific model
        const variants = selectedVehicle.fullModelData.filter(m => m.model === model);
        
        console.log(`Found ${variants.length} variants for ${model}`);
        
        if (variants.length === 0) {
            document.getElementById('menu-content').innerHTML = '<div class="menu-option" style="opacity: 0.5; cursor: default;">No variants available</div>';
            return;
        }
        
        // Convert variants to menu items
        const variantItems = variants.map(variant => {
            const variantName = variant.package || 'Standard';
            const fullTitle = variant.package ? `${model} ${variant.package}` : model;
            return {
                id: `${model}-${variantName}`.toLowerCase().replace(/[^a-z0-9]/g, ''),
                title: fullTitle,
                description: variant.category ? `${variant.category} - ${variant.engine || 'Engine info not available'}` : 'Details available',
                preview: { icon: 'üèçÔ∏è', name: fullTitle, desc: 'View full specifications' },
                _variantData: variant,
                _variantName: variantName
            };
        });
        
        renderItemsWithSearch(
            variantItems,
            (variantItem) => showSpecs(categoryId, brandName, year, model, variantItem._variantName, variantItem._variantData),
            `Search ${model} variants...`,
            false // No alphabetical separators for variants
        );
    } else {
        // For bicycles or if no data, show single option
        const content = document.getElementById('menu-content');
        content.innerHTML = '';
        const standardOption = {
            id: `${model}-standard`,
            title: 'Standard',
            description: 'Standard configuration',
            preview: { icon: categoryId === 'bicycle' ? 'üö¥' : 'üèçÔ∏è', name: `${model} Standard`, desc: 'View specifications' }
        };
        const option = createMenuOption(standardOption, () => showSpecs(categoryId, brandName, year, model, 'Standard'));
        content.appendChild(option);
    }
}

async function showSpecs(categoryId, brandName, year, model, variant, fullData) {
    selectedVehicle.model = model;
    selectedVehicle.variant = variant;
    document.getElementById('specs-panel').classList.add('active');
    
    document.getElementById('specs-title').textContent = 
        `${year} ${brandName} ${model} ${variant}`;
    
    const specGrid = document.getElementById('spec-grid');
    specGrid.innerHTML = '<div style="padding: 20px;">Loading specifications...</div>';
    
    try {
        let specs = {
            'Brand': brandName,
            'Model': model,
            'Variant': variant,
            'Year': year,
            'Type': categoryId === 'bicycle' ? 'Bicycle' : 'Motorcycle'
        };
        
        // Add motorcycle-specific data if available
        if (fullData) {
            if (fullData.category) specs['Category'] = fullData.category;
            if (fullData.engine) specs['Engine'] = fullData.engine;
        }
        
        specGrid.innerHTML = '';
        Object.entries(specs).forEach(([label, value]) => {
            const card = document.createElement('div');
            card.className = 'spec-item';
            card.innerHTML = `
                <div class="spec-label">${label}</div>
                <div class="spec-value">${value}</div>
            `;
            specGrid.appendChild(card);
        });
    } catch (error) {
        console.error('Error loading specifications:', error);
        specGrid.innerHTML = '<div style="color: red; padding: 20px;">Error loading specifications</div>';
    }
}

// Specs function removed - will fetch real data from database when needed

function closeSpecs() {
    document.getElementById('specs-panel').classList.remove('active');
}

async function addToGarage() {
    const vehicleData = {
        category: selectedVehicle.category,
        brand: selectedVehicle.brand,
        year: selectedVehicle.year,
        model: selectedVehicle.model
    };
    
    console.log('Adding to garage:', vehicleData);
    alert('Vehicle added to your garage!');
    window.location.href = '/virtual-garage-dashboard/';
}

function findComparisons() {
    alert('Opening comparison tool...');
}

function viewReviews() {
    alert('Loading community reviews...');
}

function viewGallery() {
    alert('Opening photo gallery...');
}

function customize() {
    alert('Opening customization options...');
}
</script>