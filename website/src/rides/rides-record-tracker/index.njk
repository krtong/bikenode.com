---
layout: bikenode-main-layout-01
title: Record Ride
subtitle: Track your cycling activity
showContentHeader: false
customCSS:
  - ./styles/rides-record-tracker.css
---

<div class="rides-record-tracker-container">
  <div class="rides-record-tracker-header">
    <div class="rides-record-tracker-timer" id="timer">00:00:00</div>
    <div class="rides-record-tracker-status" id="status">Ready to ride</div>
    
    <div class="rides-record-tracker-control-buttons">
      <button class="rides-record-tracker-control-btn rides-record-tracker-start-btn" id="startBtn" title="Start">‚ñ∂Ô∏è</button>
      <button class="rides-record-tracker-control-btn rides-record-tracker-pause-btn" id="pauseBtn" title="Pause" style="display: none;">‚è∏Ô∏è</button>
      <button class="rides-record-tracker-control-btn rides-record-tracker-stop-btn" id="stopBtn" title="Stop" style="display: none;">‚èπÔ∏è</button>
    </div>
  </div>

  <div class="rides-record-tracker-metrics-grid">
    <div class="rides-record-tracker-metric-card">
      <div class="rides-record-tracker-metric-value" id="distance">0.0</div>
      <div class="rides-record-tracker-metric-label">Distance (mi)</div>
    </div>
    
    <div class="rides-record-tracker-metric-card">
      <div class="rides-record-tracker-metric-value" id="speed">0.0</div>
      <div class="rides-record-tracker-metric-label">Speed (mph)</div>
    </div>
    
    <div class="rides-record-tracker-metric-card">
      <div class="rides-record-tracker-metric-value" id="avgSpeed">0.0</div>
      <div class="rides-record-tracker-metric-label">Avg Speed (mph)</div>
    </div>
    
    <div class="rides-record-tracker-metric-card">
      <div class="rides-record-tracker-metric-value" id="elevation">0</div>
      <div class="rides-record-tracker-metric-label">Elevation (ft)</div>
    </div>
    
    <div class="rides-record-tracker-metric-card">
      <div class="rides-record-tracker-metric-value" id="heartRate">--</div>
      <div class="rides-record-tracker-metric-label">Heart Rate (bpm)</div>
    </div>
    
    <div class="rides-record-tracker-metric-card">
      <div class="rides-record-tracker-metric-value" id="cadence">--</div>
      <div class="rides-record-tracker-metric-label">Cadence (rpm)</div>
    </div>
  </div>

  <div class="rides-record-tracker-map-section">
    <div class="rides-record-tracker-map-view" id="mapView">
      <div class="rides-record-tracker-gps-status">
        <div class="rides-record-tracker-gps-indicator rides-record-tracker-searching"></div>
        <span>Searching for GPS...</span>
      </div>
      <span>Map View Coming Soon</span>
    </div>
  </div>

  <div class="rides-record-tracker-ride-settings">
    <div class="rides-record-tracker-setting-card">
      <h3 class="rides-record-tracker-setting-title">Ride Type</h3>
      <div class="rides-record-tracker-ride-type-options">
        <button class="rides-record-tracker-ride-type-btn rides-record-tracker-active">
          <span>üö¥</span>
          <span>Road Cycling</span>
        </button>
        <button class="rides-record-tracker-ride-type-btn">
          <span>üèîÔ∏è</span>
          <span>Mountain Biking</span>
        </button>
        <button class="rides-record-tracker-ride-type-btn">
          <span>üöµ</span>
          <span>Gravel</span>
        </button>
        <button class="rides-record-tracker-ride-type-btn">
          <span>üèçÔ∏è</span>
          <span>Motorcycle</span>
        </button>
      </div>
    </div>

    <div class="rides-record-tracker-setting-card">
      <h3 class="rides-record-tracker-setting-title">Connected Sensors</h3>
      <div class="rides-record-tracker-sensor-list">
        <div class="rides-record-tracker-sensor-item">
          <div class="rides-record-tracker-sensor-info">
            <div class="rides-record-tracker-sensor-icon">üíó</div>
            <div>
              <div class="rides-record-tracker-sensor-name">Heart Rate Monitor</div>
            </div>
          </div>
          <span class="rides-record-tracker-sensor-status rides-record-tracker-disconnected">Disconnected</span>
        </div>
        
        <div class="rides-record-tracker-sensor-item">
          <div class="rides-record-tracker-sensor-info">
            <div class="rides-record-tracker-sensor-icon">‚ö°</div>
            <div>
              <div class="rides-record-tracker-sensor-name">Power Meter</div>
            </div>
          </div>
          <span class="rides-record-tracker-sensor-status rides-record-tracker-disconnected">Disconnected</span>
        </div>
        
        <div class="rides-record-tracker-sensor-item">
          <div class="rides-record-tracker-sensor-info">
            <div class="rides-record-tracker-sensor-icon">üìç</div>
            <div>
              <div class="rides-record-tracker-sensor-name">GPS</div>
            </div>
          </div>
          <span class="rides-record-tracker-sensor-status rides-record-tracker-connected">Connected</span>
        </div>
      </div>
    </div>
  </div>

  <div class="rides-record-tracker-quick-stats">
    <div class="rides-record-tracker-quick-stat">
      <div class="rides-record-tracker-quick-stat-value">1,234</div>
      <div class="rides-record-tracker-quick-stat-label">Total Miles</div>
    </div>
    <div class="rides-record-tracker-quick-stat">
      <div class="rides-record-tracker-quick-stat-value">42</div>
      <div class="rides-record-tracker-quick-stat-label">Total Rides</div>
    </div>
    <div class="rides-record-tracker-quick-stat">
      <div class="rides-record-tracker-quick-stat-value">56:23</div>
      <div class="rides-record-tracker-quick-stat-label">Total Time</div>
    </div>
    <div class="rides-record-tracker-quick-stat">
      <div class="rides-record-tracker-quick-stat-value">18.5</div>
      <div class="rides-record-tracker-quick-stat-label">Avg Speed</div>
    </div>
  </div>
</div>

<script>
  // Timer functionality
  let startTime = null;
  let elapsedTime = 0;
  let timerInterval = null;
  let isPaused = false;

  const timer = document.getElementById('timer');
  const status = document.getElementById('status');
  const startBtn = document.getElementById('startBtn');
  const pauseBtn = document.getElementById('pauseBtn');
  const stopBtn = document.getElementById('stopBtn');

  function formatTime(milliseconds) {
    const totalSeconds = Math.floor(milliseconds / 1000);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;
    
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  }

  function updateTimer() {
    if (!isPaused) {
      const currentTime = Date.now();
      elapsedTime = currentTime - startTime;
      timer.textContent = formatTime(elapsedTime);
      
      // Update mock metrics
      const distance = (elapsedTime / 1000 / 60 * 0.3).toFixed(1);
      const speed = (15 + Math.random() * 5).toFixed(1);
      const avgSpeed = (15 + Math.random() * 2).toFixed(1);
      const elevation = Math.floor(100 + Math.random() * 50);
      
      document.getElementById('distance').textContent = distance;
      document.getElementById('speed').textContent = speed;
      document.getElementById('avgSpeed').textContent = avgSpeed;
      document.getElementById('elevation').textContent = elevation;
      
      // Occasionally update heart rate and cadence
      if (Math.random() > 0.9) {
        document.getElementById('heartRate').textContent = Math.floor(120 + Math.random() * 40);
        document.getElementById('cadence').textContent = Math.floor(70 + Math.random() * 20);
      }
    }
  }

  startBtn.addEventListener('click', () => {
    startTime = Date.now() - elapsedTime;
    timerInterval = setInterval(updateTimer, 100);
    
    startBtn.style.display = 'none';
    pauseBtn.style.display = 'flex';
    stopBtn.style.display = 'flex';
    
    status.textContent = 'Recording ride...';
    isPaused = false;
  });

  pauseBtn.addEventListener('click', () => {
    if (isPaused) {
      startTime = Date.now() - elapsedTime;
      pauseBtn.innerHTML = '‚è∏Ô∏è';
      status.textContent = 'Recording ride...';
      isPaused = false;
    } else {
      isPaused = true;
      pauseBtn.innerHTML = '‚ñ∂Ô∏è';
      status.textContent = 'Ride paused';
    }
  });

  stopBtn.addEventListener('click', () => {
    clearInterval(timerInterval);
    
    // Reset UI
    startBtn.style.display = 'flex';
    pauseBtn.style.display = 'none';
    stopBtn.style.display = 'none';
    
    status.textContent = 'Ride completed! üéâ';
    
    // Show final stats
    setTimeout(() => {
      if (confirm('Save this ride?')) {
        alert('Ride saved successfully!');
        // Reset everything
        elapsedTime = 0;
        timer.textContent = '00:00:00';
        status.textContent = 'Ready to ride';
        
        // Reset metrics
        document.getElementById('distance').textContent = '0.0';
        document.getElementById('speed').textContent = '0.0';
        document.getElementById('avgSpeed').textContent = '0.0';
        document.getElementById('elevation').textContent = '0';
        document.getElementById('heartRate').textContent = '--';
        document.getElementById('cadence').textContent = '--';
      }
    }, 500);
  });

  // Ride type selection
  document.querySelectorAll('.rides-record-tracker-ride-type-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('.rides-record-tracker-ride-type-btn').forEach(b => 
        b.classList.remove('rides-record-tracker-active')
      );
      btn.classList.add('rides-record-tracker-active');
    });
  });

  // Simulate GPS acquisition
  setTimeout(() => {
    const gpsStatus = document.querySelector('.rides-record-tracker-gps-status');
    if (gpsStatus) {
      gpsStatus.innerHTML = `
        <div class="rides-record-tracker-gps-indicator"></div>
        <span>GPS Connected</span>
      `;
    }
  }, 3000);
</script>