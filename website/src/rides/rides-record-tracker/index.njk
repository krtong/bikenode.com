---
layout: bikenode-main-layout-01
title: Record Ride
subtitle: Track your cycling activity
showContentHeader: false
---

<style>
  .record-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .record-header {
    text-align: center;
    margin-bottom: 32px;
  }

  .ride-timer {
    font-size: 72px;
    font-weight: bold;
    color: var(--accent);
    margin-bottom: 16px;
    font-family: monospace;
  }

  .ride-status {
    font-size: 18px;
    color: var(--text-secondary);
    margin-bottom: 32px;
  }

  .control-buttons {
    display: flex;
    gap: 16px;
    justify-content: center;
    margin-bottom: 40px;
  }

  .control-btn {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    border: none;
    font-size: 48px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .start-btn {
    background: var(--accent);
    color: white;
  }

  .start-btn:hover {
    background: var(--accent-hover);
    transform: scale(1.05);
  }

  .pause-btn {
    background: #f59e0b;
    color: white;
  }

  .pause-btn:hover {
    background: #d97706;
    transform: scale(1.05);
  }

  .stop-btn {
    background: #ef4444;
    color: white;
  }

  .stop-btn:hover {
    background: #dc2626;
    transform: scale(1.05);
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 32px;
  }

  .metric-card {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 24px;
    text-align: center;
  }

  .metric-value {
    font-size: 36px;
    font-weight: bold;
    color: var(--accent);
    margin-bottom: 8px;
  }

  .metric-label {
    font-size: 14px;
    color: var(--text-secondary);
  }

  .map-section {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 24px;
  }

  .map-view {
    height: 400px;
    background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 100%);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-secondary);
    font-size: 18px;
    position: relative;
  }

  .gps-status {
    position: absolute;
    top: 16px;
    right: 16px;
    background: rgba(0, 0, 0, 0.8);
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 12px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .gps-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #10b981;
  }

  .gps-indicator.searching {
    background: #f59e0b;
    animation: pulse 1.5s infinite;
  }

  @keyframes pulse {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.3;
    }
    100% {
      opacity: 1;
    }
  }

  .ride-settings {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 32px;
  }

  .setting-card {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 20px;
  }

  .setting-title {
    font-size: 16px;
    font-weight: 600;
    margin-bottom: 16px;
  }

  .ride-type-options {
    display: grid;
    gap: 8px;
  }

  .ride-type-btn {
    padding: 12px;
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    text-align: left;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .ride-type-btn:hover {
    background: rgba(255, 255, 255, 0.05);
  }

  .ride-type-btn.active {
    background: rgba(88, 101, 242, 0.2);
    border-color: var(--accent);
  }

  .sensor-list {
    display: grid;
    gap: 12px;
  }

  .sensor-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    background: rgba(255, 255, 255, 0.03);
    border-radius: 8px;
  }

  .sensor-info {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .sensor-icon {
    width: 32px;
    height: 32px;
    background: rgba(88, 101, 242, 0.1);
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .sensor-name {
    font-weight: 500;
  }

  .sensor-status {
    font-size: 12px;
    padding: 4px 12px;
    border-radius: 12px;
  }

  .sensor-status.connected {
    background: rgba(16, 185, 129, 0.1);
    color: #10b981;
  }

  .sensor-status.disconnected {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
  }

  .quick-stats {
    background: rgba(88, 101, 242, 0.1);
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 24px;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 20px;
    text-align: center;
  }

  .quick-stat {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .quick-stat-value {
    font-size: 24px;
    font-weight: bold;
    color: var(--accent);
  }

  .quick-stat-label {
    font-size: 12px;
    color: var(--text-secondary);
  }

  @media (max-width: 768px) {
    .ride-timer {
      font-size: 48px;
    }

    .control-btn {
      width: 80px;
      height: 80px;
      font-size: 32px;
    }

    .metrics-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .map-view {
      height: 250px;
    }
  }
</style>

<div class="record-container">
  <div class="record-header">
    <div class="ride-timer" id="timer">00:00:00</div>
    <div class="ride-status" id="status">Ready to ride</div>
    
    <div class="control-buttons">
      <button class="control-btn start-btn" id="startBtn" title="Start">‚ñ∂Ô∏è</button>
      <button class="control-btn pause-btn" id="pauseBtn" title="Pause" style="display: none;">‚è∏Ô∏è</button>
      <button class="control-btn stop-btn" id="stopBtn" title="Stop" style="display: none;">‚èπÔ∏è</button>
    </div>
  </div>

  <div class="metrics-grid">
    <div class="metric-card">
      <div class="metric-value" id="distance">0.0</div>
      <div class="metric-label">Distance (mi)</div>
    </div>
    
    <div class="metric-card">
      <div class="metric-value" id="speed">0.0</div>
      <div class="metric-label">Speed (mph)</div>
    </div>
    
    <div class="metric-card">
      <div class="metric-value" id="avgSpeed">0.0</div>
      <div class="metric-label">Avg Speed (mph)</div>
    </div>
    
    <div class="metric-card">
      <div class="metric-value" id="elevation">0</div>
      <div class="metric-label">Elevation (ft)</div>
    </div>
    
    <div class="metric-card">
      <div class="metric-value" id="heartRate">--</div>
      <div class="metric-label">Heart Rate (bpm)</div>
    </div>
    
    <div class="metric-card">
      <div class="metric-value" id="cadence">--</div>
      <div class="metric-label">Cadence (rpm)</div>
    </div>
  </div>

  <div class="map-section">
    <div class="map-view">
      <div class="gps-status">
        <div class="gps-indicator searching"></div>
        <span>GPS: Searching...</span>
      </div>
      Live Map View
    </div>
  </div>

  <div class="ride-settings">
    <div class="setting-card">
      <h3 class="setting-title">Ride Type</h3>
      <div class="ride-type-options">
        <button class="ride-type-btn active">
          <span>üö¥</span>
          <div>
            <div style="font-weight: 500;">Road Cycling</div>
            <div style="font-size: 12px; color: var(--text-secondary);">Paved roads</div>
          </div>
        </button>
        <button class="ride-type-btn">
          <span>üèîÔ∏è</span>
          <div>
            <div style="font-weight: 500;">Mountain Biking</div>
            <div style="font-size: 12px; color: var(--text-secondary);">Off-road trails</div>
          </div>
        </button>
        <button class="ride-type-btn">
          <span>üöµ</span>
          <div>
            <div style="font-weight: 500;">Gravel Riding</div>
            <div style="font-size: 12px; color: var(--text-secondary);">Mixed terrain</div>
          </div>
        </button>
        <button class="ride-type-btn">
          <span>üèôÔ∏è</span>
          <div>
            <div style="font-weight: 500;">Commute</div>
            <div style="font-size: 12px; color: var(--text-secondary);">City riding</div>
          </div>
        </button>
      </div>
    </div>

    <div class="setting-card">
      <h3 class="setting-title">Connected Sensors</h3>
      <div class="sensor-list">
        <div class="sensor-item">
          <div class="sensor-info">
            <div class="sensor-icon">‚ù§Ô∏è</div>
            <span class="sensor-name">Heart Rate Monitor</span>
          </div>
          <span class="sensor-status disconnected">Disconnected</span>
        </div>
        
        <div class="sensor-item">
          <div class="sensor-info">
            <div class="sensor-icon">‚ö°</div>
            <span class="sensor-name">Speed/Cadence</span>
          </div>
          <span class="sensor-status disconnected">Disconnected</span>
        </div>
        
        <div class="sensor-item">
          <div class="sensor-info">
            <div class="sensor-icon">üí™</div>
            <span class="sensor-name">Power Meter</span>
          </div>
          <span class="sensor-status disconnected">Disconnected</span>
        </div>
      </div>
      
      <button class="btn-secondary" style="width: 100%; margin-top: 16px;">
        <span>‚ûï</span> Add Sensor
      </button>
    </div>
  </div>
</div>

<script>
  let isRecording = false;
  let isPaused = false;
  let startTime = null;
  let elapsedTime = 0;
  let timerInterval = null;

  const startBtn = document.getElementById('startBtn');
  const pauseBtn = document.getElementById('pauseBtn');
  const stopBtn = document.getElementById('stopBtn');
  const timerDisplay = document.getElementById('timer');
  const statusDisplay = document.getElementById('status');

  // Format time
  function formatTime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  }

  // Update timer
  function updateTimer() {
    if (!isPaused) {
      const currentTime = Date.now();
      const totalSeconds = Math.floor((currentTime - startTime + elapsedTime) / 1000);
      timerDisplay.textContent = formatTime(totalSeconds);
      
      // Simulate metrics update
      document.getElementById('distance').textContent = (totalSeconds * 0.01).toFixed(1);
      document.getElementById('speed').textContent = (15 + Math.random() * 5).toFixed(1);
      document.getElementById('avgSpeed').textContent = (17.5).toFixed(1);
      document.getElementById('elevation').textContent = Math.floor(totalSeconds * 0.5);
    }
  }

  // Start recording
  startBtn.addEventListener('click', () => {
    isRecording = true;
    isPaused = false;
    startTime = Date.now();
    
    startBtn.style.display = 'none';
    pauseBtn.style.display = 'flex';
    stopBtn.style.display = 'flex';
    
    statusDisplay.textContent = 'Recording...';
    document.querySelector('.gps-indicator').classList.remove('searching');
    document.querySelector('.gps-status span').textContent = 'GPS: Connected';
    
    timerInterval = setInterval(updateTimer, 1000);
  });

  // Pause recording
  pauseBtn.addEventListener('click', () => {
    if (isPaused) {
      isPaused = false;
      startTime = Date.now();
      pauseBtn.innerHTML = '‚è∏Ô∏è';
      statusDisplay.textContent = 'Recording...';
    } else {
      isPaused = true;
      elapsedTime += Date.now() - startTime;
      pauseBtn.innerHTML = '‚ñ∂Ô∏è';
      statusDisplay.textContent = 'Paused';
    }
  });

  // Stop recording
  stopBtn.addEventListener('click', () => {
    if (confirm('Stop recording and save ride?')) {
      clearInterval(timerInterval);
      alert('Ride saved successfully!');
      window.location.href = '/rides-dashboard/';
    }
  });

  // Ride type selection
  document.querySelectorAll('.ride-type-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('.ride-type-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
    });
  });
</script>