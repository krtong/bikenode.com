---
layout: docs.njk
title: Bot Setup Guide
subtitle: Step-by-step guide to setting up BikeNode Discord bot
active: bot-setup-guide
---

<section class="setup-hero">
    <div class="hero-content">
        <h1>🚀 Bot Setup Guide</h1>
        <p class="hero-subtitle">
            Get your BikeNode Discord bot up and running in minutes. 
            This comprehensive guide covers everything from invitation to advanced configuration.
        </p>
        
        <div class="setup-time">
            <span class="time-badge">⏱️ Setup Time: 5-10 minutes</span>
            <span class="difficulty-badge">🟢 Difficulty: Beginner</span>
        </div>
    </div>
</section>

<section class="setup-content">
    <!-- Step 1: Prerequisites -->
    <div class="setup-step">
        <div class="step-header">
            <div class="step-number">1</div>
            <h2>Prerequisites</h2>
        </div>
        
        <div class="step-content">
            <p>Before setting up the BikeNode bot, ensure you have:</p>
            
            <div class="checklist">
                <div class="checklist-item">
                    <input type="checkbox" id="check1">
                    <label for="check1">Discord server with Administrator permissions</label>
                </div>
                <div class="checklist-item">
                    <input type="checkbox" id="check2">
                    <label for="check2">BikeNode account (create at <a href="/mock-signup/">bikenode.com</a>)</label>
                </div>
                <div class="checklist-item">
                    <input type="checkbox" id="check3">
                    <label for="check3">Basic understanding of Discord roles and permissions</label>
                </div>
            </div>
            
            <div class="info-box">
                <h4>📋 Server Requirements</h4>
                <ul>
                    <li>Minimum 10 members (recommended for community features)</li>
                    <li>Text channels for bot commands</li>
                    <li>Permission to create and manage roles</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Step 2: Bot Invitation -->
    <div class="setup-step">
        <div class="step-header">
            <div class="step-number">2</div>
            <h2>Invite BikeNode Bot</h2>
        </div>
        
        <div class="step-content">
            <p>Start by inviting the BikeNode bot to your Discord server:</p>
            
            <div class="action-card">
                <h4>🤖 Invite Bot to Your Server</h4>
                <p>Click the button below to generate a custom invitation link for your server.</p>
                <button class="btn-primary btn-large invite-btn" onclick="openInviteFlow()">
                    <span class="btn-icon">➕</span>
                    Invite BikeNode Bot
                </button>
            </div>
            
            <div class="permission-info">
                <h4>🔐 Required Permissions</h4>
                <p>The bot will request these permissions (all are required for full functionality):</p>
                
                <div class="permissions-grid">
                    <div class="permission-item">
                        <span class="permission-icon">💬</span>
                        <div class="permission-details">
                            <h5>Send Messages</h5>
                            <p>Reply to commands and send notifications</p>
                        </div>
                    </div>
                    <div class="permission-item">
                        <span class="permission-icon">🔗</span>
                        <div class="permission-details">
                            <h5>Embed Links</h5>
                            <p>Display rich bike information and galleries</p>
                        </div>
                    </div>
                    <div class="permission-item">
                        <span class="permission-icon">📎</span>
                        <div class="permission-details">
                            <h5>Attach Files</h5>
                            <p>Share bike images and documents</p>
                        </div>
                    </div>
                    <div class="permission-item">
                        <span class="permission-icon">🏷️</span>
                        <div class="permission-details">
                            <h5>Manage Roles</h5>
                            <p>Auto-assign bike-based roles to members</p>
                        </div>
                    </div>
                    <div class="permission-item">
                        <span class="permission-icon">🗑️</span>
                        <div class="permission-details">
                            <h5>Manage Messages</h5>
                            <p>Clean up commands and moderate content</p>
                        </div>
                    </div>
                    <div class="permission-item">
                        <span class="permission-icon">📖</span>
                        <div class="permission-details">
                            <h5>Read Message History</h5>
                            <p>Process commands and maintain context</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 3: Initial Configuration -->
    <div class="setup-step">
        <div class="step-header">
            <div class="step-number">3</div>
            <h2>Initial Configuration</h2>
        </div>
        
        <div class="step-content">
            <p>Once the bot joins your server, run the setup wizard:</p>
            
            <div class="command-demo">
                <div class="command-input">
                    <span class="command-prompt">💬</span>
                    <code>!bikenode setup</code>
                </div>
                <div class="command-output">
                    <div class="bot-response">
                        <span class="bot-avatar">🤖</span>
                        <div class="response-content">
                            <strong>BikeNode Bot</strong>
                            <p>Welcome to BikeNode! Let's get your server configured.</p>
                            <div class="setup-options">
                                <button class="option-btn">🚀 Quick Setup (Recommended)</button>
                                <button class="option-btn">⚙️ Advanced Setup</button>
                                <button class="option-btn">📖 View Documentation</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="setup-options-detail">
                <h4>Setup Options Explained:</h4>
                
                <div class="option-detail">
                    <h5>🚀 Quick Setup (Recommended for beginners)</h5>
                    <ul>
                        <li>Automatically configures basic settings</li>
                        <li>Sets up default command prefix (!bike)</li>
                        <li>Enables core features with sensible defaults</li>
                        <li>Creates basic auto-roles for popular bike brands</li>
                    </ul>
                </div>
                
                <div class="option-detail">
                    <h5>⚙️ Advanced Setup (For experienced Discord admins)</h5>
                    <ul>
                        <li>Customize all bot settings step-by-step</li>
                        <li>Configure specific channels for commands</li>
                        <li>Set up detailed auto-role rules</li>
                        <li>Customize welcome messages and notifications</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 4: Basic Commands -->
    <div class="setup-step">
        <div class="step-header">
            <div class="step-number">4</div>
            <h2>Test Basic Commands</h2>
        </div>
        
        <div class="step-content">
            <p>Verify your setup by testing these essential commands:</p>
            
            <div class="test-commands">
                <div class="command-test">
                    <div class="test-header">
                        <h4>1. Help Command</h4>
                        <span class="test-badge">Essential</span>
                    </div>
                    <div class="command-example">
                        <code>!bike help</code>
                    </div>
                    <p>Should display the command menu with all available options.</p>
                </div>
                
                <div class="command-test">
                    <div class="test-header">
                        <h4>2. Add a Bike</h4>
                        <span class="test-badge">Core Feature</span>
                    </div>
                    <div class="command-example">
                        <code>!bike add Yamaha R1 2024</code>
                    </div>
                    <p>Should add a bike to your virtual garage and possibly assign a role.</p>
                </div>
                
                <div class="command-test">
                    <div class="test-header">
                        <h4>3. View Garage</h4>
                        <span class="test-badge">Core Feature</span>
                    </div>
                    <div class="command-example">
                        <code>!bike list</code>
                    </div>
                    <p>Should display your virtual garage with the bike you just added.</p>
                </div>
                
                <div class="command-test">
                    <div class="test-header">
                        <h4>4. Server Stats</h4>
                        <span class="test-badge">Community</span>
                    </div>
                    <div class="command-example">
                        <code>!community stats</code>
                    </div>
                    <p>Should show basic server statistics and member counts.</p>
                </div>
            </div>
            
            <div class="troubleshooting-quick">
                <h4>⚠️ Commands Not Working?</h4>
                <div class="troubleshoot-grid">
                    <div class="troubleshoot-item">
                        <h5>Check Bot Permissions</h5>
                        <p>Ensure the bot has all required permissions in the channel you're testing.</p>
                    </div>
                    <div class="troubleshoot-item">
                        <h5>Verify Command Prefix</h5>
                        <p>The default prefix is <code>!bike</code>. Check if it was changed during setup.</p>
                    </div>
                    <div class="troubleshoot-item">
                        <h5>Bot Online Status</h5>
                        <p>Confirm the bot appears online in your member list.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 5: Advanced Features -->
    <div class="setup-step">
        <div class="step-header">
            <div class="step-number">5</div>
            <h2>Configure Advanced Features</h2>
        </div>
        
        <div class="step-content">
            <p>Enhance your server with these powerful features:</p>
            
            <div class="features-grid">
                <div class="feature-setup">
                    <h4>🏷️ Auto-Role Assignment</h4>
                    <p>Automatically assign roles based on bikes in users' garages.</p>
                    <div class="setup-command">
                        <code>!autorole setup</code>
                    </div>
                    <div class="feature-benefits">
                        <span class="benefit">Automatic community organization</span>
                        <span class="benefit">Brand-specific channels access</span>
                        <span class="benefit">Enhanced member identity</span>
                    </div>
                </div>
                
                <div class="feature-setup">
                    <h4>👋 Welcome Messages</h4>
                    <p>Greet new members with custom messages and bike prompts.</p>
                    <div class="setup-command">
                        <code>!welcome set #general "Welcome {user}! Share your bike with !bike add"</code>
                    </div>
                    <div class="feature-benefits">
                        <span class="benefit">Friendly first impression</span>
                        <span class="benefit">Encourage participation</span>
                        <span class="benefit">Custom server personality</span>
                    </div>
                </div>
                
                <div class="feature-setup">
                    <h4>🔍 Smart Notifications</h4>
                    <p>Get notified about new bike releases, price changes, and community events.</p>
                    <div class="setup-command">
                        <code>!notify setup</code>
                    </div>
                    <div class="feature-benefits">
                        <span class="benefit">Stay updated on new bikes</span>
                        <span class="benefit">Price drop alerts</span>
                        <span class="benefit">Community event reminders</span>
                    </div>
                </div>
                
                <div class="feature-setup">
                    <h4>📊 Analytics Dashboard</h4>
                    <p>Track server activity, popular bikes, and member engagement.</p>
                    <div class="setup-command">
                        <code>!analytics enable</code>
                    </div>
                    <div class="feature-benefits">
                        <span class="benefit">Server growth insights</span>
                        <span class="benefit">Popular content tracking</span>
                        <span class="benefit">Engagement metrics</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 6: Best Practices -->
    <div class="setup-step">
        <div class="step-header">
            <div class="step-number">6</div>
            <h2>Best Practices & Tips</h2>
        </div>
        
        <div class="step-content">
            <div class="tips-grid">
                <div class="tip-category">
                    <h4>🎯 Channel Organization</h4>
                    <ul>
                        <li>Create dedicated channels for bot commands</li>
                        <li>Use #bike-garage for showcase and discussion</li>
                        <li>Set up #bot-commands to keep other channels clean</li>
                        <li>Consider brand-specific channels for large communities</li>
                    </ul>
                </div>
                
                <div class="tip-category">
                    <h4>👥 Role Management</h4>
                    <ul>
                        <li>Keep the BikeNode bot role above auto-assigned roles</li>
                        <li>Create role hierarchy: Admin > Moderator > Auto-Roles > Members</li>
                        <li>Use role colors to distinguish bike types/brands</li>
                        <li>Regularly review and clean up unused roles</li>
                    </ul>
                </div>
                
                <div class="tip-category">
                    <h4>🚀 Community Growth</h4>
                    <ul>
                        <li>Encourage members to add bikes and get roles</li>
                        <li>Host regular bike showcases and discussions</li>
                        <li>Use the leaderboard feature to gamify participation</li>
                        <li>Share interesting bike comparisons and stats</li>
                    </ul>
                </div>
                
                <div class="tip-category">
                    <h4>🔧 Maintenance</h4>
                    <ul>
                        <li>Regularly update bot permissions as needed</li>
                        <li>Monitor command usage and adjust settings</li>
                        <li>Keep welcome messages fresh and engaging</li>
                        <li>Review analytics monthly for insights</li>
                    </ul>
                </div>
            </div>
            
            <div class="pro-tip">
                <h4>💡 Pro Tip</h4>
                <p>Create a #getting-started channel with pinned messages explaining how new members can use BikeNode features. Include examples of commands and showcase some community bikes to inspire participation.</p>
            </div>
        </div>
    </div>

    <!-- Support Section -->
    <div class="setup-support">
        <h2>Need Help?</h2>
        <p>If you run into any issues during setup, we're here to help!</p>
        
        <div class="support-options">
            <div class="support-option">
                <div class="support-icon">💬</div>
                <h4>Discord Support</h4>
                <p>Join our support server for real-time help</p>
                <a href="https://discord.gg/bikenode" class="btn-primary">Join Support Server</a>
            </div>
            
            <div class="support-option">
                <div class="support-icon">📚</div>
                <h4>Documentation</h4>
                <p>Browse our complete documentation</p>
                <a href="/bot-documentation/" class="btn-secondary">View Docs</a>
            </div>
            
            <div class="support-option">
                <div class="support-icon">📧</div>
                <h4>Email Support</h4>
                <p>Send us a detailed support request</p>
                <a href="mailto:support@bikenode.com" class="btn-secondary">Email Support</a>
            </div>
        </div>
    </div>
</section>

<style>
.setup-hero {
    padding: 60px 0;
    background: linear-gradient(135deg, rgba(88, 101, 242, 0.1) 0%, rgba(255, 255, 255, 0.02) 100%);
    text-align: center;
}

.hero-content h1 {
    font-size: 2.5rem;
    font-weight: 800;
    color: var(--text-primary);
    margin-bottom: 16px;
}

.hero-subtitle {
    font-size: 1.1rem;
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 24px;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
}

.setup-time {
    display: flex;
    justify-content: center;
    gap: 16px;
    flex-wrap: wrap;
}

.time-badge,
.difficulty-badge {
    background: var(--card-bg);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: var(--text-primary);
    padding: 8px 16px;
    border-radius: 12px;
    font-size: 0.9rem;
    font-weight: 500;
}

.setup-content {
    max-width: 900px;
    margin: 0 auto;
    padding: 60px 24px;
}

.setup-step {
    margin-bottom: 60px;
    background: var(--card-bg);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    padding: 32px;
}

.step-header {
    display: flex;
    align-items: center;
    gap: 20px;
    margin-bottom: 24px;
}

.step-number {
    background: var(--accent);
    color: white;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    font-size: 1.25rem;
    flex-shrink: 0;
}

.step-header h2 {
    color: var(--text-primary);
    margin: 0;
    font-size: 1.5rem;
}

.step-content p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 24px;
}

.checklist {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 24px;
}

.checklist-item {
    display: flex;
    align-items: center;
    gap: 12px;
}

.checklist-item input[type="checkbox"] {
    width: 18px;
    height: 18px;
    accent-color: var(--accent);
}

.checklist-item label {
    color: var(--text-secondary);
    cursor: pointer;
}

.checklist-item label a {
    color: var(--accent);
    text-decoration: none;
}

.info-box {
    background: rgba(88, 101, 242, 0.05);
    border: 1px solid rgba(88, 101, 242, 0.2);
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
}

.info-box h4 {
    color: var(--text-primary);
    margin: 0 0 12px 0;
    font-size: 1rem;
}

.info-box ul {
    color: var(--text-secondary);
    margin: 0;
    padding-left: 20px;
}

.info-box li {
    margin-bottom: 6px;
}

.action-card {
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 24px;
    text-align: center;
    margin-bottom: 24px;
}

.action-card h4 {
    color: var(--text-primary);
    margin: 0 0 8px 0;
    font-size: 1.1rem;
}

.action-card p {
    color: var(--text-secondary);
    margin: 0 0 20px 0;
}

.btn-large {
    padding: 16px 32px;
    font-size: 16px;
    font-weight: 600;
}

.btn-icon {
    margin-right: 8px;
}

.permission-info {
    margin-top: 24px;
}

.permission-info h4 {
    color: var(--text-primary);
    margin: 0 0 12px 0;
    font-size: 1rem;
}

.permission-info p {
    color: var(--text-secondary);
    margin: 0 0 20px 0;
}

.permissions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 16px;
}

.permission-item {
    display: flex;
    align-items: flex-start;
    gap: 12px;
    background: rgba(255, 255, 255, 0.02);
    border-radius: 8px;
    padding: 16px;
}

.permission-icon {
    font-size: 1.5rem;
    flex-shrink: 0;
}

.permission-details h5 {
    color: var(--text-primary);
    margin: 0 0 4px 0;
    font-size: 0.9rem;
}

.permission-details p {
    color: var(--text-secondary);
    margin: 0;
    font-size: 0.8rem;
    line-height: 1.4;
}

.command-demo {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 24px;
}

.command-input {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 16px;
}

.command-prompt {
    font-size: 1.2rem;
}

.command-input code {
    background: rgba(88, 101, 242, 0.1);
    color: var(--accent);
    padding: 4px 8px;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
}

.command-output {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding-top: 16px;
}

.bot-response {
    display: flex;
    gap: 12px;
    align-items: flex-start;
}

.bot-avatar {
    font-size: 1.5rem;
    flex-shrink: 0;
}

.response-content strong {
    color: var(--accent);
    display: block;
    margin-bottom: 4px;
}

.response-content p {
    color: var(--text-secondary);
    margin: 0 0 12px 0;
}

.setup-options {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.option-btn {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: var(--text-primary);
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
    text-align: left;
    font-size: 0.9rem;
    transition: all 0.2s ease;
}

.option-btn:hover {
    background: rgba(88, 101, 242, 0.1);
    border-color: var(--accent);
}

.setup-options-detail {
    margin-top: 24px;
}

.setup-options-detail h4 {
    color: var(--text-primary);
    margin: 0 0 16px 0;
    font-size: 1rem;
}

.option-detail {
    margin-bottom: 20px;
}

.option-detail h5 {
    color: var(--text-primary);
    margin: 0 0 8px 0;
    font-size: 0.95rem;
}

.option-detail ul {
    color: var(--text-secondary);
    margin: 0;
    padding-left: 20px;
}

.option-detail li {
    margin-bottom: 4px;
    line-height: 1.4;
}

.test-commands {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-bottom: 24px;
}

.command-test {
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 20px;
}

.test-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
}

.test-header h4 {
    color: var(--text-primary);
    margin: 0;
    font-size: 1rem;
}

.test-badge {
    background: var(--accent);
    color: white;
    padding: 2px 8px;
    border-radius: 8px;
    font-size: 0.7rem;
    font-weight: 500;
}

.command-example {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px 12px;
    margin-bottom: 8px;
}

.command-example code {
    color: #a5b4fc;
    font-family: 'Courier New', monospace;
}

.command-test p {
    color: var(--text-secondary);
    margin: 0;
    font-size: 0.9rem;
}

.troubleshooting-quick {
    background: rgba(245, 158, 11, 0.05);
    border: 1px solid rgba(245, 158, 11, 0.2);
    border-radius: 8px;
    padding: 20px;
    margin-top: 24px;
}

.troubleshooting-quick h4 {
    color: #f59e0b;
    margin: 0 0 16px 0;
    font-size: 1rem;
}

.troubleshoot-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 16px;
}

.troubleshoot-item h5 {
    color: var(--text-primary);
    margin: 0 0 6px 0;
    font-size: 0.9rem;
}

.troubleshoot-item p {
    color: var(--text-secondary);
    margin: 0;
    font-size: 0.8rem;
    line-height: 1.4;
}

.troubleshoot-item code {
    background: rgba(245, 158, 11, 0.1);
    color: #f59e0b;
    padding: 2px 4px;
    border-radius: 3px;
    font-family: 'Courier New', monospace;
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 24px;
}

.feature-setup {
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 20px;
}

.feature-setup h4 {
    color: var(--text-primary);
    margin: 0 0 8px 0;
    font-size: 1rem;
}

.feature-setup p {
    color: var(--text-secondary);
    margin: 0 0 12px 0;
    font-size: 0.9rem;
}

.setup-command {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    padding: 8px 12px;
    margin-bottom: 12px;
}

.setup-command code {
    color: #a5b4fc;
    font-family: 'Courier New', monospace;
    font-size: 0.8rem;
}

.feature-benefits {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.benefit {
    color: var(--text-secondary);
    font-size: 0.8rem;
    position: relative;
    padding-left: 12px;
}

.benefit::before {
    content: '✓';
    position: absolute;
    left: 0;
    color: #10b981;
    font-weight: bold;
}

.tips-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 24px;
    margin-bottom: 24px;
}

.tip-category {
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 20px;
}

.tip-category h4 {
    color: var(--text-primary);
    margin: 0 0 12px 0;
    font-size: 1rem;
}

.tip-category ul {
    color: var(--text-secondary);
    margin: 0;
    padding-left: 20px;
}

.tip-category li {
    margin-bottom: 6px;
    line-height: 1.4;
    font-size: 0.9rem;
}

.pro-tip {
    background: rgba(34, 197, 94, 0.05);
    border: 1px solid rgba(34, 197, 94, 0.2);
    border-radius: 8px;
    padding: 20px;
}

.pro-tip h4 {
    color: #22c55e;
    margin: 0 0 8px 0;
    font-size: 1rem;
}

.pro-tip p {
    color: var(--text-secondary);
    margin: 0;
    line-height: 1.5;
}

.setup-support {
    background: var(--card-bg);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    padding: 32px;
    text-align: center;
}

.setup-support h2 {
    color: var(--text-primary);
    margin: 0 0 8px 0;
    font-size: 1.5rem;
}

.setup-support p {
    color: var(--text-secondary);
    margin: 0 0 32px 0;
    font-size: 1.1rem;
}

.support-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 24px;
}

.support-option {
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 24px;
}

.support-icon {
    font-size: 2.5rem;
    margin-bottom: 16px;
}

.support-option h4 {
    color: var(--text-primary);
    margin: 0 0 8px 0;
    font-size: 1rem;
}

.support-option p {
    color: var(--text-secondary);
    margin: 0 0 16px 0;
    font-size: 0.9rem;
}

@media (max-width: 768px) {
    .hero-content h1 {
        font-size: 2rem;
    }
    
    .setup-time {
        flex-direction: column;
        align-items: center;
    }
    
    .step-header {
        flex-direction: column;
        text-align: center;
        gap: 12px;
    }
    
    .permissions-grid,
    .features-grid,
    .tips-grid,
    .support-options {
        grid-template-columns: 1fr;
    }
    
    .test-header {
        flex-direction: column;
        gap: 8px;
        align-items: flex-start;
    }
    
    .troubleshoot-grid {
        grid-template-columns: 1fr;
    }
}
</style>

<script>
// Bot invitation flow
function openInviteFlow() {
    alert('Opening Discord bot invitation flow...');
    // In a real app, this would open the Discord OAuth flow
}

// Interactive checklist
document.querySelectorAll('.checklist-item input').forEach(checkbox => {
    checkbox.addEventListener('change', function() {
        const label = this.nextElementSibling;
        if (this.checked) {
            label.style.textDecoration = 'line-through';
            label.style.opacity = '0.7';
        } else {
            label.style.textDecoration = 'none';
            label.style.opacity = '1';
        }
    });
});

// Command examples - make them clickable to copy
document.querySelectorAll('.command-example code, .setup-command code').forEach(code => {
    code.style.cursor = 'pointer';
    code.title = 'Click to copy command';
    
    code.addEventListener('click', function() {
        const text = this.textContent;
        navigator.clipboard.writeText(text).then(() => {
            const originalText = this.textContent;
            this.textContent = 'Copied!';
            setTimeout(() => {
                this.textContent = originalText;
            }, 1000);
        });
    });
});

// Option buttons in demo
document.querySelectorAll('.option-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        const option = this.textContent.trim();
        alert(`Selected: ${option}\n\nIn the real bot, this would start the ${option.toLowerCase()} flow.`);
    });
});

// Progress tracking for setup steps
let completedSteps = 0;
const totalSteps = 6;

function markStepComplete(stepNumber) {
    const step = document.querySelector(`.setup-step:nth-child(${stepNumber})`);
    if (step && !step.classList.contains('completed')) {
        step.classList.add('completed');
        completedSteps++;
        
        // Add visual completion indicator
        const stepNumberEl = step.querySelector('.step-number');
        stepNumberEl.innerHTML = '✓';
        stepNumberEl.style.background = '#10b981';
        
        // Update progress
        console.log(`Step ${stepNumber} completed! Progress: ${completedSteps}/${totalSteps}`);
    }
}

// Auto-mark steps as complete when users interact with key elements
document.querySelectorAll('.checklist-item input').forEach((checkbox, index) => {
    checkbox.addEventListener('change', function() {
        if (document.querySelectorAll('.checklist-item input:checked').length === 3) {
            markStepComplete(1);
        }
    });
});
</script>